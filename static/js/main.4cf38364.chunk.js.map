{"version":3,"sources":["stores/userStore.js","stores/appStore.js","services/error.js","services/response.js","services/axios.js","services/api.js","services/eventsApi.js","stores/profileStore.js","services/authApi.js","services/codes.js","includes/validators.js","stores/authStore.js","services/admin/adminApi.js","services/admin/roomsApi.js","stores/admin/roomsStore.js","routes/PrivateRoute.js","components/Bayan/index.js","components/LogoutLink/index.js","components/Header/index.js","components/Footer/index.js","pages/Login/index.js","pages/Register/index.js","includes/models.js","includes/modelsHelpers.js","components/ServerError/index.js","components/AppError/index.js","pages/Profile/index.js","components/BaseComponent.js","components/RoomEvents/index.js","components/NoRooms/index.js","services/roomsApi.js","pages/Events/index.js","components/SaveEvent.js","components/EventForm/index.js","components/EventFormSkeleton/index.js","pages/AddEvent/index.js","pages/ChangeEvent/index.js","pages/DeleteEvent/index.js","pages/Page404/index.js","pages/ServerError/index.js","pages/AppError/index.js","pages/Offline/index.js","pages/admin/Rooms/index.js","themes/index.js","App.js","index.js"],"names":["makeObservable","this","u","user","undefined","isAdmin","observable","action","RENDER_STATES","window","addEventListener","isOnline","token","localStorage","setItem","removeItem","value","renderState","message","errorMessage","navigator","onLine","getItem","ApiDataTypeError","Error","Response","response","init","name","key","parseInt","getNestedPropertyValue","Number","isInteger","getApiCode","getApiMessage","apiData","getApiData","obj","path","chains","split","_hasNestedKey","rest","length","hasOwnProperty","_getNestedPropertyValue","createAxiosInstance","baseUrl","axiosInstance","axios","create","baseURL","interceptors","request","use","config","appStore","headers","Authorization","res","hasValidApiResponse","error","Promise","reject","resolve","successHandler","errorHandler","process","Api","data","post","id","put","delete","get","ymd","rooms","params","date","username","eventsApi","getMyEvents","then","events","catch","email","password","CODES","AUTH","FAILURE","VALIDATION","EMAIL_EXISTS","LOGIN","EMPTY_CREDENTIALS","INVALID_CREDENTIALS","LOGOUT","VERIFY","UNSIGNED_TOKEN","INVALID_USER","EVENTS","ROOM_NOT_EXISTS","ROOM_NOT_ACTIVE","CROSS_DATES","NOT_EXISTS","NOT_BELONG_TO_YOU","ID_REQUIRED","ID_INVALID","JWT_UNAUTHORIZED","INVALID_TOKEN","ROOMS","INVALID_DATE","validateRoomTitle","title","String","validateRoomNumber","number","values","password_confirm","serviceMessage","errors","validate","RegExp","test","validateUserName","validateEmail","validatePassword","inProgress","authApi","login","userStore","setUser","setToken","apiCode","finally","register","saveRooms","deleteRoom","RoomsStore","fields","required","text","status","focusedField","_id","isNew","Object","keys","filter","field","msg","isLoading","roomsApi","getRoomsList","roomId","room","find","createNewRoom","err","setErrorMessage","updateRoom","push","getNewRoomObject","e","fieldName","fieldValue","validationRes","validateInputFields","requiredFields","getRequiredFields","postData","forEach","newId","postKeys","setTimeout","focus","loadRooms","needleRoom","roomsFiltered","fieldNames","Array","isArray","validateFunc","isValid","PrivateRoute","Component","component","render","props","isLoggedIn","to","Bayan","backgroundColor","color","bayanStyle","className","style","React","LogoutLink","inject","logout","unsetToken","Link","href","onClick","doLogout","bind","Header","admin_links","RouterLink","AppBar","position","Toolbar","Footer","version","Login","observer","handleSubmit","preventDefault","authStore","history","replace","handleEmailChange","setEmail","target","handlePasswordChange","setPassword","reset","Container","maxWidth","onSubmit","noValidate","FormControl","TextField","label","fullWidth","variant","type","onChange","FormHelperText","Button","disabled","LinkRouter","Register","handleChangeName","setName","handleChangeEmail","handlePasswordConfirmChange","setPasswordConfirm","helperTextName","helperTextEmail","helperTextPasswordConfirmation","helperTextPassword","Model","Room","assignProps","User","Event","event","description","date_start","date_end","EventHelper","format","dayjs","ServerError","severity","Alert","map","row","index","AppError","Profile","renderEventList","spacing","profileStore","Grid","item","sm","dateFormatClient","routerLink","container","a","loadProfile","PureComponent","INIT","COMMON","COMPONENT_STATE","BaseComponent","getServerErrorState","opts","defaults","state","assign","alert","scroll","setState","scrollToMessages","containerId","constructor","element","document","querySelector","scrollIntoView","behavior","STATUSES","EventDetails","selectedTime","renderEventInfo","size","RoomEvents","onDataChange","nextProps","initDinamycProps","timeLine","nowLabel","resetSelections","setTimeLineLeft","onRezise","prevWindowWidth","innerWidth","resizeTimeButtons","getTimeButtonWidth","timeButtonsWidth","timeLineRef","current","offsetWidth","buttonsCount","getVibisleTimeButtonsCount","parseFloat","buttonWidth","querySelectorAll","minWidth","width","toRight","fromTime","timeButtons","buttonsWrapper","prevBtn","nextBtn","currentPos","left","newPos","btnFrom","scrollStep","leftPosLimit","rightPosLimit","setAttribute","removeAttribute","Math","abs","scrollToRight","firstVisibleTimeIndex","scrollToLeft","scrollSwitch","direction","handleScrollMouseDown","button","stopPropagation","mouseDownOnScrollInterval","setInterval","isMouseHoldedOnScroll","handleScrollMouseUp","clearInterval","handleTimeClick","currentTarget","classList","toggle","dataset","setTimeData","changeTime","setIntermediate","btn","timeData","timeIndex1","timeIndex2","add","remove","handleAddEvent","args","time","timeLineData","items","link","join","redirectToAdd","createRef","stepMinutes","prepTimeLine","initTimeData","nowIndex","NaN","nextState","shouldUpdate","buttons","setFirstVisibleIndex","removeEventListener","some","call","btnIndex","crossedOrPengingEvent","getStatus","selected","clickedBtn","isNaN","round","random","timeToCompare","second","millisecond","dateStart","dateEnd","subtract","TimeLine","ref","data-direction","onMouseDown","onMouseUp","ArrowLeft","buttonProps","ArrowRight","NoRooms","dateString","BASE_RENDER_STATES","NO_ROOMS","UPDATE","Events","memoize","list","filteredField","roomsFilterValue","re","toString","search","applyRoomFilterValue","handleRoomsFilterChange","handleDateChange","selectedDate","loadRoomsWithEventsOfDay","timeLineLabelFormat","prevRoomList","roomEventsRef","datePost","resultState","getRoomsWithEventsOfDay","timeLineLen","now","timeLineDate","hour","minute","ceil","startOfDay","startOf","allItems","i","getTimeLine","breakPoints","xs","md","lg","xl","justify","applyFilter","handleChange","applyDate","loopRooms","toLowerCase","RoomFilter","clearTimeout","timeout","inputProps","InputLabelProps","shrink","EventsDatePicker","utils","DateUtils","KeyboardButtonProps","SAVED","SaveEvent","handleDateStartChange","datetime","validateDateStart","handleDateEndChange","validateDateEnd","handleRoomChange","handleTitleChange","validateTitle","handleDescriptionChange","Date","valid","getTime","dateFormat","setRoomState","result","stateProps","roomsList","getEvent","DETAILS_ID_REQUIRED","DETAILS_ID_INVALID","EventForm","submitBtnText","Select","MenuItem","DateTimePicker","ampm","minutesStep","multiline","crossedEvents","EventFormSkeleton","Skeleton","height","EventCreated","AddEvent","withRouter","createdEvent","initEventState","defaultStartFrom","setMinutes","getMinutes","defaultEvent","match","getEventFromUrl","dateFrom","from","dateTo","loadRoomList","newStateOpts","getPostData","addEvent","errorFields","getErrorFields","getValidationErrorState","dbEvents","ChangeEvent","changed","changeEvent","eventId","eventModel","roomState","loadEventDetails","eventState","changedEvent","componentStatus","handleStartDateTimeChange","DeleteComfirm","handleDeleteEvent","EventDeleted","DeleteEvent","deleteEvent","newProps","Page404","location","pathname","reload","reloadWindow","Offline","adminRooms","refreshListHandler","adminRoomsStore","toggleStatusHandler","toggleRoomsStatus","updateRoomHandler","inputTimeoutx","includes","setRoomField","updateField","inputSavingDelay","addRoomHandler","addFreshRoom","removeRoomHandler","textFieldFocusHandler","saveFocus","CircularProgress","IconButton","edge","aria-label","Refresh","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","Fragment","onFocus","defaultValue","align","Delete","colSpan","textColor","contrastText","paletteType","theme","createMuiTheme","palette","background","default","primary","main","secondary","colors","green","red","overrides","MuiTypography","colorPrimary","MuiPaper","root","MuiCssBaseline","html","fontFamily","WebkitFontSmoothing","fontSize","App","setRenderState","verify","loggedIn","page","exact","ThemeProvider","CssBaseline","stores","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4cf38364.chunk.js","sourcesContent":["import { makeObservable, observable, action } from 'mobx';\n\nclass UserStore {\n    constructor() {\n        makeObservable(this);\n    }\n\n    @observable user = undefined;\n\t@action setUser(u) {\n\t\tthis.user = u;\n\t}\n    @action unsetUser() {\n        this.user = undefined;\n    }\n\n\tget isLoggedIn() {\n\t\treturn !!this.user;\n\t}\n\n    get user() {\n        return this.user;\n    }\n\n\tget isAdmin() {\n        return this.user?.isAdmin;\n\t}\n\n}\n\nexport default new UserStore();\n","import { makeObservable, observable, action } from 'mobx';\n\nexport const RENDER_STATES = {\n    'LOADER': 'LOADER',\n    'OFFLINE': 'OFFLINE',\n    'ERROR': 'ERROR',\n    'COMMON': 'COMMON',\n};\n\n\nclass AppStore {\n    constructor() {\n        window.addEventListener('online', () => {\n            console.log('this.isOnline: true');\n            this.isOnline = true;\n        });\n        window.addEventListener('offline', () => {\n            console.log('this.isOnline: false');\n            this.isOnline = false;\n        });\n        makeObservable(this);\n    }\n    @observable isOnline = window.navigator.onLine\n\n    @observable token = window.localStorage.getItem('token');\n    @action setToken(token) {\n        this.token = token;\n        window.localStorage.setItem('token', token);\n    }\n\n    @action unsetToken() {\n        this.token = undefined;\n        window.localStorage.removeItem('token');\n    }\n\n    @observable renderState = RENDER_STATES.LOADER;\n    @action setRenderState(value) {\n        this.renderState = value;\n    }\n\n    @observable errorMessage = '';\n    @action setErrorMessage(message) {\n        this.errorMessage= message;\n    }\n    getErrorMessage() {\n        return this.errorMessage;\n    }\n}\n\nexport default new AppStore();\n","export default class ApiDataTypeError extends Error {}\n","export default class Response {\n    constructor(response) {\n        this.init(response);\n        this.name = 'my own response';\n    }\n\n    init(response) {\n        for(let key in response) {\n            this[key] = response[key];\n        }\n    }\n\n    getApiCode() {\n        return parseInt(this.getNestedPropertyValue(this, 'data.code'));\n    }\n\n    getApiMessage() {\n        return this.getNestedPropertyValue(this, 'data.message');\n    }\n\n    getApiData() {\n        return this.getNestedPropertyValue(this, 'data.data');\n    }\n\n    hasValidApiResponse() {\n        return (Number.isInteger(this.getApiCode())\n            && this.getApiMessage() !== null) ? true : false;\n    }\n\n    getErrorFields() {\n        const apiData = this.getApiData();\n        return apiData ? apiData['errors'] : {};\n    }\n\n    /*\n     * @obj Object\n     * @path string key path separated by dott\n     * @return Boolean\n     */\n    hasNestedProperty(obj, path) {\n        function _hasNestedKey(obj, key, ...rest) {\n            if ('undefined' === typeof obj) return false;\n            if (!rest.length) return obj.hasOwnProperty(key);\n            return _hasNestedKey(obj[key], ...rest);\n        }\n        const chains = path.split('.');\n        return _hasNestedKey(obj, ...chains);\n    }\n\n    /*\n     * @obj Object\n     * @path string key path separated by dott\n     * @return mixed (property value | null)\n     */\n    getNestedPropertyValue(obj, path) {\n        function _getNestedPropertyValue(obj, key, ...rest) {\n            if ('undefined' === typeof obj) return null;\n            if (!rest.length){\n                return obj.hasOwnProperty(key) ? obj[key] : null;\n            }\n            return _getNestedPropertyValue(obj[key], ...rest);\n        }\n        const chains = path.split('.');\n        return _getNestedPropertyValue(obj, ...chains);\n    }\n}\n","import axios from \"axios\";\nimport ApiDataTypeError from './error';\nimport Response from './response';\nimport appStore from '../stores/appStore';\n\nconst createAxiosInstance = (baseUrl) => {\n    const axiosInstance = axios.create({\n        baseURL: baseUrl,\n    });\n    axiosInstance.interceptors.request.use(function (config) {\n        const token = appStore.token;\n        config.headers = { Authorization: `Bearer ${token}` }\n        return config;\n    });\n\n    axiosInstance.interceptors.response.use(\n        response => successHandler(response),\n        error => errorHandler(error)\n    );\n    return axiosInstance;\n}\n\nexport default createAxiosInstance;\n\nfunction successHandler(res) {\n    const response = new Response(res);\n    if (!response.hasValidApiResponse()) {\n        const error = ApiDataTypeError('Invalid response from server');\n        return Promise.reject({ error: error, response: response, });\n    }\n    return Promise.resolve({ error: false, response: response });\n}\n\nfunction errorHandler(error) {\n    const response = new Response(error.response);\n    return Promise.reject( { error: error, response: response, });\n}\n","import createAxiosInstance from './axios';\n\n\nconst axiosInstance = createAxiosInstance(process.env.REACT_APP_API_BASE_URL);\n\nclass Api {\n    constructor() {\n        this.axios = axiosInstance;\n    }\n}\n\nexport default Api;\n","import Api from './api';\n\nclass EventsApi extends Api{\n    addEvent(data) {\n        return this.axios.post('/events/event/', data);\n    }\n\n    changeEvent(id, data) {\n        return this.axios.put('/events/event/' + id, data);\n    }\n\n    deleteEvent(id) {\n        return this.axios.delete('/events/event/' + id);\n    }\n\n    getEvent(id) {\n        return this.axios.get('/events/event/' + id);\n    }\n\n    list(ymd, rooms = null) {\n        let params = { date: ymd, rooms: rooms}\n\t\treturn this.axios.get('/events/list', { params: params })\n    }\n\n    getMyEvents() {\n\t\treturn this.axios.get('/events/myEvents');\n    }\n}\n\nexport default new EventsApi();\n","import { makeObservable, observable, action } from 'mobx';\nimport eventsApi from '../services/eventsApi';\n\nexport const RENDER_STATES = {\n    INIT: 'INIT',\n    COMMON: 'COMMON',\n    FAILURE: 'FAILURE',\n};\n\nclass ProfileStore {\n    constructor() {\n        makeObservable(this);\n    }\n\n    @observable renderState = RENDER_STATES.INIT;\n    @observable events = [];\n\n    @action loadProfile(username) {\n        this.renderState = RENDER_STATES.INIT;\n        eventsApi.getMyEvents()\n            .then(action(({ response }) => {\n                const apiData = response.getApiData();\n                this.renderState = RENDER_STATES.COMMON;\n                this.events = apiData.events;\n            }))\n            .catch(action(( {error, response }) => {\n                this.events = [];\n                this.renderState = RENDER_STATES.FAILURE;\n            }));\n    }\n}\n\nexport default new ProfileStore();\n","import Api from './api';\n\nclass AuthApi extends Api {\n    verify() {\n        return this.axios.get('/auth/verify');\n    }\n\n    login(email, password) {\n        return this.axios.post('/auth/login', {email: email, password: password});\n    }\n\n    logout() {\n        return this.axios.post('/auth/logout');\n    }\n\n    register(user) {\n        return this.axios.post('/auth/register', user);\n    }\n}\n\nexport default new AuthApi();\n","// API CODES\nconst CODES = {\n    AUTH: {\n        FAILURE: 1000,\n        VALIDATION: 1001,\n        EMAIL_EXISTS: 1002,\n        LOGIN: 1003,\n        EMPTY_CREDENTIALS: 1004,\n        INVALID_CREDENTIALS: 1005,\n        LOGOUT: 1006,\n        VERIFY: 1007,\n        UNSIGNED_TOKEN: 1007,\n        INVALID_USER: 1008,\n    },\n    EVENTS: {\n        FAILURE: 1100,\n        VALIDATION: 1101,\n        ROOM_NOT_EXISTS: 1102,\n        ROOM_NOT_ACTIVE: 1103,\n        CROSS_DATES: 1104,\n        NOT_EXISTS: 1105,\n        NOT_BELONG_TO_YOU: 1106,\n        ID_REQUIRED: 1107,\n        ID_INVALID: 1108,\n    },\n    LOGIN: {\n        EMPTY_CREDENTIALS: 1200,\n        INVALID_CREDENTIALS: 1201,\n        JWT_UNAUTHORIZED: 1202,\n        UNSIGNED_TOKEN: 1203,\n        INVALID_TOKEN: 1204,\n        EMAIL_EXISTS: 1205,\n    },\n    ROOMS: {\n        FAILURE: 1300,\n        INVALID_DATE: 1301,\n    }\n}\nexport default CODES;\n","export const validateEmail = (email = '') => {\n    const emailRegExp = RegExp( /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/);\n    const isValid = emailRegExp.test(email);\n    return isValid ? true : { message: 'Invalid Email' };\n}\n\nexport const validateUserName = (name) => {\n    const nameRegexp = RegExp(/^[a-z]\\w{2,30}$/i);\n    const isValid = nameRegexp.test(name);\n    return isValid ? true : { message: 'Name should starts with letter, and contain minimum 3 character' };\n}\n\nexport const validatePassword = (password = '') => {\n    const passwordRegexp = /^.*(?=.{8,})(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!#$%&? \"]).*$/;\n    const isValid = passwordRegexp.test(password);\n    return isValid ? true: { message: 'must contain 8 characters and at least one number, one letter and one unique character such as !#$%&?' };\n}\n\nexport const validateRoomTitle = (title) => {\n    const isValid = ((typeof title === 'string' || title instanceof String)\n        && title.length >= 3)\n    return isValid ? true : { message: 'Atleast 3 characaters required' };\n}\n\nexport const validateRoomNumber = (number) => {\n    // eslint-disable-next-line\n    const isValid = number && (number == (number ^ 0));\n    return isValid ? true : { message: 'Allowed only integers' };\n}\n","import { makeObservable, observable, action } from 'mobx';\nimport appStore from './appStore';\nimport userStore from './userStore';\nimport authApi from '../services/authApi';\nimport CODES from '../services/codes'\nimport { validateEmail, validateUserName, validatePassword } from '../includes/validators';\n\n\nexport const RENDER_STATES = {\n    COMMON: 'COMMON',\n    FAILURE: 'FAILURE',\n};\n\nclass authStore{\n    constructor() {\n        makeObservable(this);\n    }\n\n    @observable values = {\n        email: '',\n        password: '',\n        name: '',\n        password_confirm: '',\n    }\n\n    @action reset() {\n        this.values.name = '';\n        this.values.email = '';\n        this.values.password = '';\n        this.values.password_confirm = '';\n        this.serviceMessage = '';\n        this.errors = {}\n    }\n\n    @action setName(name) {\n        this.values.name = name;\n        const validate = validateUserName(name);\n        console.log('name', validate);\n        true === validate ? delete this.errors.name: this.errors.name = validate;\n    }\n\n    @action setEmail(email) {\n        this.values.email = email;\n        const validate = validateEmail(email);\n        true === validate ? delete this.errors.email : this.errors.email = validate;\n    }\n\n    @action setPassword(password) {\n        this.values.password = password;\n        const validate = validatePassword(password);\n        true === validate ? delete this.errors.password: this.errors.password = validate;\n    }\n\n    @action setPasswordConfirm(password_confirm) {\n        this.values.password_confirm = password_confirm;\n        console.log(this.values.password, this.values.password_confirm);\n        const validate = this.values.password === this.values.password_confirm;\n        true === validate ?  delete this.errors.password_confirm\n            : this.errors.password_confirm = { message: 'Passwords dismatched' };\n    }\n\n    @observable renderState = RENDER_STATES.COMMON;\n    @observable errors = {};\n    @observable serviceMessage = '';\n    @observable inProgress = false;\n\n    @action login() {\n        this.inProgress = true;\n        this.serviceMessage = '';\n        return authApi.login(this.values.email, this.values.password)\n            .then(action(({ response }) => {\n                const apiData = response.getApiData();\n                userStore.setUser(apiData.user);\n                appStore.setToken(apiData.user.token);\n            }))\n            .catch(action(({ error, response }) => {\n                const apiMessage = response.getApiMessage();\n                const apiCode = response.getApiCode();\n                this.renderState = RENDER_STATES.FAILURE;\n                switch(apiCode) {\n                    case CODES.AUTH.INVALID_CREDENTIALS:\n                    case CODES.AUTH.EMPTY_CREDENTIALS:\n                        this.serviceMessage = 'Invalid credentials';\n                        break;\n                    default:\n                        console.log('authStore login default case', apiMessage);\n                        this.serviceMessage = 'Server error';\n                }\n                throw new Error('Server error');\n            }))\n            .finally(action(() => {\n                this.inProgress = false;\n            }));\n    }\n\n    @action register() {\n        this.inProgress = false;\n        const data = {\n            name: this.values.name,\n            email: this.values.email,\n            password: this.values.password,\n        }\n        return authApi.register(data)\n            .then(action(({ response }) => {\n                const apiData = response.getApiData();\n                userStore.setUser(apiData.user);\n                appStore.setToken(apiData.user.token);\n            }))\n            .catch(action(({ error, response }) => {\n                const apiMessage = response.getApiMessage();\n                const apiCode = response.getApiCode();\n                const apiData = response.getApiData();\n                console.log('register catch', apiCode, apiMessage);\n                switch(apiCode) {\n                    case CODES.AUTH.VALIDATION:\n                        this.errors = apiData.errors;\n                        break;\n                    case CODES.AUTH.EMAIL_EXISTS:\n                        this.errors = {email: { message: 'Email exists' }};\n                        break;\n                    default:\n                        this.serviceMessage = 'Server error';\n                }\n                throw error;\n            }))\n            .finally(action(() => {\n                this.inProgress = false;\n            }));\n    }\n}\nexport default new authStore();\n","import createAxiosInstance from '../axios';\n\n\nconst axiosInstance = createAxiosInstance(process.env.REACT_APP_ADMIN_API_BASE_URL);\n\nclass AdminApi {\n    constructor() {\n        this.axios = axiosInstance;\n    }\n}\n\nexport default AdminApi;\n","import Api from './adminApi.js';\n\nclass RoomsApi extends Api {\n    getRoomsList() {\n        return this.axios.get('/rooms/roomsList');\n    }\n    saveRooms = (rooms) => {\n        return this.axios.post('/rooms/saveRooms', {rooms: rooms});\n    }\n    deleteRoom = (id) => {\n        return this.axios.delete(`/rooms/room/${id}`);\n    }\n}\n\nexport default new RoomsApi();\n","import { makeObservable, observable, action } from 'mobx';\nimport roomsApi from '../../services/admin/roomsApi';\nimport { validateRoomNumber, validateRoomTitle }  from '../../includes/validators';\n\nexport const RENDER_STATES = {\n    INIT: 'INIT',\n    COMMON: 'COMMON',\n    FAILURE: 'FAILURE',\n};\n\nclass RoomsStore {\n    constructor() {\n        makeObservable(this);\n    }\n    fields = {\n        number: {\n            required: true, text: 'Number',\n        },\n        title: {\n            required: true, text: 'Title'\n        },\n        status: { text: 'Status' }\n    }\n\n    focusedField = undefined;\n\n    getNewRoomObject() {\n        return {\n            _id: 'freshRoom_' + this.rooms.length,\n            number: '',\n            title: '',\n            status: 'closed',\n            // isNew nean room not yet stored in database\n            isNew: true\n        }\n    }\n\n    getRequiredFields() {\n        return Object.keys(this.fields).filter(field => true === this.fields[field].required);\n    }\n\n    @observable renderState = RENDER_STATES.INIT;\n    @observable rooms = [];\n    @observable page = 1;\n    @observable errorMessage = '';\n    @observable isLoading = false;\n\n    @action setErrorMessage(msg) {\n        this.errorMessage = msg;\n    }\n\n    @action loadRoomList() {\n        this.isLoading = true;\n        roomsApi.getRoomsList()\n        .then(action(({ response }) => {\n            const apiData = response.getApiData();\n            this.renderState = RENDER_STATES.COMMON;\n            this.rooms = apiData.rooms;\n        }))\n        .catch(action(( {error, response }) => {\n            this.rooms = [];\n            this.renderState = RENDER_STATES.FAILURE;\n        }))\n        .finally(action(() => {\n            this.isLoading = false;\n        }));\n    }\n\n    @action toggleRoomsStatus(roomId) {\n        this.isLoading = true;\n        let room = this.rooms.find(room => room._id === roomId);\n        if (!room) {\n            console.error(`Room with id:${roomId} doesn't exist`);\n            return;\n        }\n        const status = room.status === 'closed' ? 'active' : 'closed';\n        room['status'] = status;\n        if (room.isNew) {\n            try {\n                this.createNewRoom(room, {status: status});\n            }\n            catch (err) {\n                console.error('toggleStatusHandler->createNewRoom', err);\n                this.setErrorMessage(err.message);\n            }\n\n        }\n        else {\n            try{\n                this.updateRoom(room, {status: status});\n            }\n            catch (err) {\n                this.setErrorMessage(err.message)\n                console.error('toggleStatusHandler->updateRoom', err)\n            }\n        }\n    }\n\n    @action addFreshRoom() {\n        this.rooms.push(this.getNewRoomObject());\n    }\n\n    saveFocus(e) {\n        console.warn('saveFocus', e);\n        this.focusedField = e;\n    }\n\n    @action setRoomField(roomId, fieldName, fieldValue) {\n        const room = this.rooms.find(room => room._id === roomId);\n        if (room) {\n            room[fieldName] = fieldValue;\n            const validationRes = validateInputFields(fieldName, fieldValue);\n            if (true !== validationRes) {\n                if (false === 'errors' in room){\n                    console.warn('create error prop');\n                    room.errors = {};\n                }\n                console.warn('set err prop', fieldName);\n\n                room.errors[fieldName] = validationRes[fieldName];\n                return false;\n            }\n            else {\n                if (room.errors && room.errors[fieldName]) {\n                    console.warn('delete err', fieldName);\n                    delete room.errors[fieldName];\n                }\n            }\n        }\n        return true;\n    }\n\n    @action updateField(roomId, name, value) {\n        const data = {[name]: value};\n        const room = this.rooms.find(room => room._id === roomId);\n        room[name] = value;\n        if (!room) {\n            console.info('updateRoomHandler nothing to save');\n            return;\n        }\n\n        if (room.isNew) {\n            this.createNewRoom(room);\n        }\n        else {\n            this.updateRoom(room, data);\n        }\n    }\n\n    @action createNewRoom(room) {\n        if (!room.isNew) {\n            throw new Error('This room in database')\n        }\n        const requiredFields = this.getRequiredFields();\n        this.errors = {}\n        const validationRes = validateInputFields(requiredFields, room);\n        if (true !== validationRes) {\n            console.warn('set all errors props');\n            room.errors = validationRes;\n            return;\n        }\n        const postData = {};\n        requiredFields.forEach(field => {\n            postData[field] = room[field];\n        });\n        this.isLoading = true;\n        roomsApi.saveRooms(postData)\n            .then(action(({ response }) => {\n                const apiData = response.getApiData();\n                const newId = apiData?.room._id;\n                // change rooms coming from createNewRoom arg\n                if (newId) {\n                    room._id = newId;\n                    delete room.isNew;\n                    // delete room.errors;\n                }\n                else {\n                    this.setErrorMessage('Missed room id from server response');\n                }\n            }))\n            .catch(action(({ error, response }) => {\n                const apiData = response && response.getApiData();\n                if (apiData.fields && 'object' === typeof apiData.fields) {\n                    console.warn('set all err props from resp');\n                    room.errors = apiData.fields;\n                }\n                else {\n                    console.error(error);\n                    this.setErrorMessage('Server error');\n                }\n            }))\n            .finally(action(() => {\n                this.isLoading = false;\n            }));\n    }\n\n    @action updateRoom(room, data = false) {\n        if (room.isNew) {\n            throw new Error('This room does not exists in database');\n        }\n        if ('object' !== typeof data) {\n            console.log(data);\n            throw new Error('Invalid input data');\n        }\n        const postData = {_id: room._id};\n        const postKeys = Object.keys(data);\n        postKeys.forEach(field => {\n            if (field in room) {\n                postData[field] = data[field];\n                room[field] = data[field]\n            }\n        });\n        const validationRes = validateInputFields(Object.keys(postData), postData);\n        console.warn('validationRes', validationRes);\n        if (true !== validationRes) {\n            if (false === 'errors' in room.errors) {\n                room.errors = {};\n            }\n            Object.keys(validationRes).forEach(key => {\n                room.errors[key] = validationRes[key];\n            });\n        }\n        if (room.errors && Object.keys(room.errors).length > 0) {\n            return false;\n        }\n        this.isLoading = true;\n        roomsApi.saveRooms(postData)\n        .then(action(({ response }) => {\n            // restore focus after disable inputs\n            setTimeout(() => {\n                this.focusedField.focus();\n            }, 0);\n        }))\n        .catch(action(({ error, response }) => {\n            if (response) {\n                if (response.getApiCode() === 1105) {\n                    console.error('This room does not exists on database');\n                    this.setErrorMessage('This room does not exists on database');\n                    setTimeout(() => {\n                        this.loadRooms();\n                    }, 2000);\n                    return;\n                }\n                const apiData = response.getApiData();\n                const errorFields = (apiData.fields && 'object' === typeof apiData.fields) || null;\n                if (errorFields) {\n                    room.errors = apiData.fields;\n                }\n            }\n\n        }))\n        .finally(action(() => {\n            this.isLoading = false;\n        }));\n    }\n\n    @action deleteRoom(roomId) {\n        let needleRoom = false;\n        let roomsFiltered = this.rooms.filter(room => {\n            if (room._id === roomId) {\n                needleRoom = room;\n                return false;\n            }\n            return true;\n        });\n\n        if (!needleRoom) {\n            console.error('Nothing to delete');\n            return;\n        }\n\n        else {\n            this.isLoading = false;\n            roomsApi.deleteRoom(roomId)\n            .then(action(({ response }) => {\n                this.rooms = roomsFiltered;\n            }))\n            .catch(action(({ error, response }) => {\n                const message = (error && error.getApiMessage()) || 'Error while deleting';\n                if (response && 1104 === response.getApiCode()) {\n                    this.rooms = roomsFiltered;\n                }\n                else {\n                    this.setErrorMessage(message)\n                }\n            }))\n            .finally(action(() => {\n                this.isLoading = false;\n            }));\n        }\n    }\n\n\n}\n\nexport const validateInputFields = (fields, data  = []) => {\n    const fieldNames = 'string' === typeof fields ? [fields] : fields;\n    if (Array.isArray(fieldNames)) {\n        const errors = {};\n        fieldNames.forEach(field => {\n            let validateFunc;\n            switch(field) {\n                case 'title':\n                    validateFunc = validateRoomTitle;\n                    break;\n                case 'number':\n                    validateFunc = validateRoomNumber;\n                    break;\n            }\n            if (validateFunc) {\n                const value = fieldNames.length === 1 ? String(data) : data[field];\n                const isValid = validateFunc(value);\n                if (true !== isValid)\n                    errors[field] = isValid;\n            }\n        });\n\n        return Object.keys(errors).length ? errors : true;\n    }\n}\n\nexport default new RoomsStore();\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst PrivateRoute = ({component: Component, ...rest}) => {\n    return (\n\n        // Show the component only when the user is logged in\n        // Otherwise, redirect the user to /login page\n\n        <Route {...rest} render={props => (\n            rest.isLoggedIn ?\n                <Component {...props} />\n            : <Redirect to=\"/login\" />\n        )} />\n    );\n};\n\nexport default PrivateRoute;\n","import React from 'react';\nimport './index.scss'\n\nclass Bayan extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.backgroundColor = this.props.backgroundColor || 'inherit';\n\t\tthis.color = this.props.color || 'inherit';\n\t}\n\trender() {\n\t\tconst bayanStyle = {\n\t\t\tbackgroundColor: this.backgroundColor,\n\t\t\tcolor: this.color,\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"bayan\" style={bayanStyle}>\n\t\t\t\t<div>&middot;</div>\n\t\t\t\t<div>&middot;</div>\n\t\t\t\t<div>&middot;</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Bayan;\n","import React from 'react';\nimport authApi from '../../services/authApi'\nimport { inject } from 'mobx-react';\nimport Link from '@material-ui/core/Link';\n\n@inject('appStore')\n@inject('userStore')\nclass LogoutLink extends React.Component {\n\tdoLogout() {\n        authApi.logout().finally(() => {\n            this.props.userStore.setUser(undefined);\n            this.props.appStore.unsetToken();\n        });\n\t}\n\trender() {\n        console.log('LogoutLink render', this.props.userStore.isLoggedIn);\n        if (this.props.userStore.isLoggedIn) {\n            return (\n                <Link href=\"#\" onClick={this.doLogout.bind(this)}>Logout</Link>\n            );\n        }\n        return '';\n\t}\n}\n\nexport default LogoutLink;\n","import React from 'react';\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { inject } from 'mobx-react';\nimport LogoutLink from '../LogoutLink'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Link from \"@material-ui/core/Link\";\n\nimport './index.scss';\n\n\n\n@inject(\"userStore\")\nclass Header extends React.Component {\n\trender() {\n\t\tconst userStore = this.props.userStore;\n\t\tif (userStore.user) {\n\t\t\tlet admin_links = '';\n\t\t\tif (userStore.isAdmin) {\n\t\t\t\tadmin_links = <Link component={RouterLink} to=\"/rooms\">Rooms</Link>\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<AppBar position=\"static\" color=\"primary\">\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<LogoutLink/>\n\t\t\t\t\t\t{admin_links}\n\t\t\t\t\t\t<Link component={RouterLink} to=\"/events\">Events</Link>\n\t\t\t\t\t\t<Link component={RouterLink} to={`/@${userStore.user.name}`}>Profile</Link>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t);\n\t\t}\n\t\telse {\n\t\t\treturn (\n\t\t\t\t<AppBar position=\"static\">\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Link component={RouterLink} to=\"/login\">Login</Link>\n\t\t\t\t\t\t<Link component={RouterLink} to=\"/register\">Register</Link>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default Header;\n","import React from 'react';\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Link from \"@material-ui/core/Link\";\n\nimport './index.scss';\n\nclass Footer extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<footer>\n\t\t\t\t<Toolbar className=\"footer\">\n\t\t\t\t\t<div>\n                        Based on <Link href=\"https://reactjs.org\">React</Link>{React.version}\n                    </div>\n\t\t\t\t</Toolbar>\n\t\t\t</footer>\n\t\t);\n\t}\n}\n\nexport default Footer;\n","import React from 'react';\nimport { Link as LinkRouter } from 'react-router-dom';\nimport { observer, inject } from 'mobx-react';\nimport Bayan from '../../components/Bayan';\nimport { Container, FormControl, TextField, Button, Link, FormHelperText } from '@material-ui/core'\n\nimport './index.scss';\n\n\n@inject('authStore')\n@observer\nclass Login extends React.Component {\n    componentWillUnmount() {\n        this.props.authStore.reset();\n    }\n\n\thandleSubmit = e => {\n        e.preventDefault();\n        this.props.authStore.login().then(() => this.props.history.replace(\"/\")).catch((e) => {\n            console.log(e);\n        });\n\t};\n\n\thandleEmailChange = e => {\n        console.log(e.target.value);\n        this.props.authStore.setEmail(e.target.value);\n\t}\n\n\thandlePasswordChange = e => {\n        this.props.authStore.setPassword(e.target.value);\n\t}\n\n\trender() {\n        console.log('Login page render');\n\t\tconst errors = this.props.authStore.errors;\n\t\tconst serviceMessage = this.props.authStore.serviceMessage;\n\t\treturn (\n\t\t\t<Container maxWidth=\"sm\">\n\t\t\t\t<div className=\"login page\">\n\t\t\t\t\t<h2 className=\"text-center\">Login page</h2>\n\t\t\t\t\t<form onSubmit={this.handleSubmit} noValidate>\n\t\t\t\t\t\t<FormControl className=\"login__form-control\">\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\tlabel=\"Email:\"\n\t\t\t\t\t\t\t\tvalue={this.props.authStore.values.email}\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tonChange={this.handleEmailChange}\n\t\t\t\t\t\t\t\terror={!!errors?.email} />\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t<FormControl className=\"login__form-control\">\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\tlabel=\"Password:\"\n\t\t\t\t\t\t\t\tvalue={this.props.authStore.values.password}\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\tonChange={this.handlePasswordChange}\n\t\t\t\t\t\t\t\terror={!!errors?.password} />\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t<FormControl error={!!serviceMessage.length} className=\"login__serviceContainer\">\n\t\t\t\t\t\t\t{this.props.authStore.inProgress && <Bayan/>}\n\t\t\t\t\t\t\t<FormHelperText>{serviceMessage}</FormHelperText>\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" fullWidth type=\"submit\"\n                                disabled={this.props.authStore.inProgress}>Login\n                            </Button>\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t<p className=\"login__invite\">\n\t\t\t\t\t\t\t<Link color=\"primary\" component={LinkRouter} to=\"/register\">\n\t\t\t\t\t\t\t\tDon't have account? click register\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</Container>\n\t\t);\n\t}\n\n}\n\nexport default Login;\n","import React from 'react'\nimport Bayan from '../../components/Bayan'\nimport { Button, Container, FormControl, TextField, FormHelperText, } from '@material-ui/core'\nimport { observer, inject } from 'mobx-react';\n\nimport './index.scss';\n\n@inject('authStore')\n@observer\nclass Register extends React.Component {\n    componentWillUnmount() {\n        this.props.authStore.reset();\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.authStore.register()\n            .then(() => {\n                this.props.history.replace('/');\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    handleChangeName = e => {\n        this.props.authStore.setName(e.target.value);\n    }\n\n    handleChangeEmail = e => {\n        this.props.authStore.setEmail(e.target.value);\n    }\n\n    handlePasswordChange = e => {\n        this.props.authStore.setPassword(e.target.value);\n    }\n\n    handlePasswordConfirmChange = e => {\n        this.props.authStore.setPasswordConfirm(e.target.value);\n    }\n\n    render() {\n        const errors = this.props.authStore.errors;\n        console.log('errors', errors.email);\n        const helperTextName = errors?.name?.message || 'Name should starts with letter, and contain minimum 3 character';\n        const helperTextEmail = errors?.email?.message || 'Email is invalid';\n        const helperTextPasswordConfirmation = errors?.password_confirm?.message || 'Invalid password confirmation';\n        const helperTextPassword = errors?.password?.message || 'Password must contain 8 characters and at least one number, one letter and one special character';\n        const serviceMessage = this.props.authStore.serviceMessage;\n        return (\n            <Container maxWidth=\"sm\">\n                <div className=\"register page\">\n                    <h2 className=\"text-center\">Register new user</h2>\n\n                    <form onSubmit={this.handleSubmit}>\n                        <FormControl error={!!errors.name}>\n                            <TextField\n                                name=\"name\"\n                                onChange={this.handleChangeName}\n                                id=\"name\"\n                                label=\"Name:\"\n                                fullWidth\n                                variant=\"outlined\"\n                            />\n                            {!!errors.name && <FormHelperText className=\"errorHelper\">{helperTextName}</FormHelperText> }\n                        </FormControl>\n\n                        <FormControl error={!!errors.email}>\n                            <TextField\n                                onChange={this.handleChangeEmail}\n                                name=\"email\"\n                                fullWidth\n                                label=\"Email:\"\n                                variant=\"outlined\"\n                            />\n                            {!!errors.email && <FormHelperText className=\"errorHelper\">{helperTextEmail}</FormHelperText> }\n                        </FormControl>\n\n                        <FormControl error={!!errors.password}>\n                            <TextField\n                                onChange={this.handlePasswordChange}\n                                name=\"password\"\n                                fullWidth\n                                label=\"Password:\"\n                                variant=\"outlined\"\n                                type=\"password\"\n                            />\n                            {!!errors.password && <FormHelperText id=\"password-error\">{helperTextPassword}</FormHelperText>}\n                        </FormControl>\n\n                        <FormControl error={!!errors.password_confirm}>\n                            <TextField\n                                onChange={this.handlePasswordConfirmChange}\n                                name=\"password_confirm\"\n                                fullWidth\n                                label=\"Password confirm:\"\n                                variant=\"outlined\"\n                                type=\"password\"\n                            />\n                            {!!errors.password_confirm && <FormHelperText>{helperTextPasswordConfirmation}</FormHelperText>}\n                        </FormControl>\n\n                        <FormControl error={!!serviceMessage.length} className=\"serviceMessage\">\n                            {this.props.authStore.inProgress && <Bayan/>}\n                            <FormHelperText>{serviceMessage}</FormHelperText>\n                        </FormControl>\n\n                        <FormControl>\n                            <Button variant=\"contained\" color=\"secondary\"  fullWidth type=\"submit\"\n                                disabled={this.props.authStore.inProgress}>Register\n                            </Button>\n                        </FormControl>\n\n                    </form>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default Register;\n","class Model {\n    assignProps(props) {\n        Object.keys(props).forEach(key => {\n            this[key] = props[key];\n        });\n    }\n}\n\nexport class Room extends Model {\n    constructor(room = {}) {\n        super();\n        this._id = '';\n        this.number = '';\n        this.assignProps(room);\n    }\n}\n\nexport class User extends Model {\n    constructor(user = {}) {\n        super();\n        this._id = '';\n        this.name = '';\n        this.email = '';\n        this.assignProps(user);\n    }\n}\n\nexport class Event extends Model {\n    constructor(event = {}) {\n        super();\n        this._id =  '';\n        this.room = new Room();\n        this.user = new User();\n        this.title = '';\n        this.description = '';\n        this.date_start = '';\n        this.date_end = '';\n\n        this.assignProps(event);\n    }\n}\n\n","import { Event } from './models';\nimport dayjs from 'dayjs';\n\n\nexport class EventHelper extends Event {\n\n    static dateFormat(date, format = '') {\n        return dayjs(date).format(format);\n    }\n\n    /*\n     * Description.\n     * Format date to client side pages\n     */\n    static dateFormatClient(date, format = 'ddd DD YYYY HH:mm') {\n        return dayjs(date).format(format);\n    }\n}\n","import React from 'react';\nimport Alert from '@material-ui/lab/Alert'\n\nexport default class ServerError extends React.Component {\n    constructor(props) {\n        super(props);\n        this.data = []\n        if (typeof this.props.data === 'string' || this.props.data instanceof String) {\n            this.data.push(this.props.data);\n        }\n        else {\n            this.data = this.props.data;\n        }\n        this.severity = this.props.severity || 'error';\n    }\n    render() {\n        return (\n            <Alert className=\"ServerError\" severity={this.severity}>\n                {this.data.map((row, index) => (\n                    <div key={index}>{row}</div>\n                ))}\n            </Alert>\n        );\n    }\n}\n","import React from 'react';\nimport Alert from '@material-ui/lab/Alert'\n\nexport default class AppError extends React.Component {\n    constructor(props) {\n        super(props);\n        this.data = []\n        if (typeof this.props.data === 'string' || this.props.data instanceof String) {\n            this.data.push(this.props.data);\n        }\n        else {\n            this.data = this.props.data;\n        }\n        this.severity = this.props.severity || 'error';\n    }\n    render() {\n        return (\n            <Alert className=\"appError\" severity={this.severity}>\n                {this.data.map((row, index) => (\n                    <div key={index}>{row}</div>\n                ))}\n            </Alert>\n        );\n    }\n}\n","import React from 'react';\nimport { Link as routerLink } from 'react-router-dom';\nimport { inject, observer } from 'mobx-react';\nimport {\n    Grid,\n    Container,\n    Link,\n} from '@material-ui/core'\nimport { EventHelper } from '../../includes/modelsHelpers';\nimport ServerError from '../../components/ServerError';\nimport AppError from '../../components/AppError';\nimport Bayan from '../../components/Bayan';\nimport { RENDER_STATES } from '../../stores/profileStore';\n\nimport './index.scss';\n\n\n@inject('profileStore')\n@observer\nclass Profile extends React.PureComponent {\n    async componentDidMount() {\n        this.props.profileStore.loadProfile();\n    }\n    renderEventList = () => {\n        let spacing = 4;\n        let events = '';\n        if (!this.props.profileStore.events.length) {\n            events = <p>You dont have any events</p>;\n            spacing = 0;\n        }\n        else {\n            events = (\n                this.props.profileStore.events.map((event, index) => (\n                    <Grid key={event._id} item sm={4} className=\"event\">\n                        <div>Room: {event.room.number}</div>\n                        <div>Title: {event.title}</div>\n                        <div>Date start: {EventHelper.dateFormatClient(event.date_start)}</div>\n                        <div>Date start: {EventHelper.dateFormatClient(event.date_end)}</div>\n                        <div>\n                            <div>Status: {event.status}</div>\n                            <Link component={routerLink} variant=\"inherit\" to={`/events/change/${event._id}`}>change</Link>&nbsp;|&nbsp;\n                            <Link component={routerLink} variant=\"inherit\" to={`/events/delete/${event._id}`}>delete</Link>\n                        </div>\n                    </Grid>\n                ))\n            );\n        }\n        return (\n            <div className=\"events\">\n                <h3>Events</h3>\n                <Grid container className=\"eventsList\" spacing={spacing}>\n                    {events}\n                </Grid>\n            </div>\n        );\n    }\n    render() {\n        console.info('render profile page', this.props.profileStore.renderState)\n        let component = null;\n        switch(this.props.profileStore.renderState) {\n            case RENDER_STATES.INIT:\n                component = <Bayan/>;\n                    break;\n            case RENDER_STATES.COMMON:\n                component = this.renderEventList();\n                break;\n            case RENDER_STATES.FAILURE:\n                component = <ServerError data=\"Server error\"/>;\n                break;\n            default:\n                component = <AppError data=\"Application error\"/>;\n        }\n        return (\n            <Container maxWidth=\"md\" className={`profile page ${this.props.profileStore.renderState}`}>\n                {component}\n            </Container>\n        );\n    }\n\n}\n\nexport default Profile;\n","import React from 'react';\n\nexport const RENDER_STATES = {\n    INIT: 'INIT',\n    FAILURE: 'FAILURE',\n    COMMON: 'COMMON',\n};\n\nexport const COMPONENT_STATE = {\n    renderState: RENDER_STATES.INIT,\n    serviceMessage: null,\n    errors: {},\n    isLoading: false,\n};\n\nexport default class BaseComponent extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n        this.state = COMPONENT_STATE;\n\t}\n\tscrollToMessages() {\n\t\tconst className = this.constructor.name;\n\t\tconst containerId = className + 'Messages';\n\t\tconst element = document.querySelector('#' + containerId);\n\t\tif (element) {\n\t\t\telement.scrollIntoView({behavior: \"smooth\"});\n\t\t}\n\t}\n\n    getServerErrorState = (message, opts = {}) => {\n        const defaults = {\n            serviceMessage: message,\n            renderState: RENDER_STATES.FAILURE,\n        };\n        const state = Object.assign(defaults, opts);\n        return state;\n    };\n\n    getPermissionErrorState(message, opts = {}) {\n        const defaults = {\n            serviceMessage: message,\n            renderState: RENDER_STATES.FAILURE,\n        };\n        const state = Object.assign(defaults, opts);\n        return state;\n    }\n\n    getValidationErrorState(message, errors = {}, opts = {}) {\n        const defaults = {\n            serviceMessage: message,\n            errors: errors,\n        };\n        const state = Object.assign(defaults, opts);\n        return state;\n    }\n\n\talert = (obj, scroll = true) => {\n\t\tthis.setState(obj);\n\t\tif (scroll) {\n\t\t\tthis.scrollToMessages();\n\t\t}\n\t};\n}\n","import React from 'react'\nimport { Redirect } from 'react-router-dom';\n\nimport { inject } from 'mobx-react';\nimport dayjs from 'dayjs';\n\nimport { Button, } from '@material-ui/core';\nimport {\n    ArrowLeft as ArrowLeftIcon,\n    ArrowRight as ArrowRightIcon,\n} from \"@material-ui/icons\";\n\nimport { EventHelper } from '../../includes/modelsHelpers';\n\nimport './index.scss';\n\n\nconst STATUSES = {\n    AVAILABLE: 'available',\n    RESERVED: 'reserved',\n    PENDING: 'pending',\n};\n\n@inject('userStore')\nclass RoomEvents extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.timeLineRef = React.createRef();\n\n        this.stepMinutes = this.props.stepMinutes;\n\n        this.initDinamycProps(this.props);\n\n        this.state = {\n            redirectToAdd: null,\n            selectedTime: this.timeLine[this.nowLabel],\n        };\n        this.mouseDownOnScrollInterval = false;\n        this.isMouseHoldedOnScroll = false;\n        this.prevWindowWidth = null;\n    }\n\n    initDinamycProps(props) {\n        this.date = props.date;\n        this.room = props.room;\n\n        this.timeLineData = props.timeLine;\n        this.nowLabel = this.timeLineData.nowLabel;\n        this.timeLine = this.prepTimeLine(this.room.events);\n\n        this.initTimeData();\n    }\n\n    setFirstVisibleIndex(index = false) {\n        console.log('setFirstVisibleIndex start');\n        console.log('index:', index);\n        if (!index) {\n            index = this.timeLineData.nowIndex;\n            console.log(' 1 index:', index);\n        }\n        if (index < 0) {\n            index = 0;\n            console.log(' 2 index:', index);\n        }\n        const buttonsCount = this.getVibisleTimeButtonsCount();\n        if (index > this.timeLineData.items.length - buttonsCount) {\n            index = this.timeLineData.items.length - buttonsCount;\n            console.log(' 3 index:', index);\n        }\n        console.log('nowIndex:', this.timeLineData.nowIndex,\n            'buttonsCount', buttonsCount);\n        console.log('set this.firstVisibleTimeIndex', index);\n        this.firstVisibleTimeIndex = index;\n        console.log('setFirstVisibleIndex end');\n    }\n\n    initTimeData() {\n        this.timeData = {\n            timeIndex1: NaN,\n            timeIndex2: NaN,\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.props.room.events.length !== nextProps.room.events.length) {\n            let ids = this.props.room.events.map(event => event._id).join(',');\n            let newIds = nextProps.room.events.map(event => event._id).join(',');\n            const shouldUpdate = (ids !== newIds);\n            if (shouldUpdate) {\n                this.onDataChange(nextProps);\n            }\n            return shouldUpdate;\n        }\n\n        if (dayjs(nextProps.date).isValid() && this.props.date !== nextProps.date) {\n            this.onDataChange(nextProps);\n            return true;\n        }\n\n        if (this.state.selectedTime.label !== nextState.selectedTime.label) {\n            return true;\n        }\n\n        return true;\n    }\n\n    onDataChange = (nextProps) => {\n        this.initDinamycProps(nextProps);\n        this.setState({ selectedTime: this.timeLine[this.nowLabel] });\n        this.resetSelections();// reset current selections\n        this.setTimeLineLeft();\n    }\n\n    resetSelections() {\n        this.setIntermediate();\n        const buttons = this.timeLineRef.current.querySelectorAll('.selected, .postData');\n        if (buttons) {\n            buttons.forEach(button => {\n                button.classList.remove('selected');\n                button.classList.remove('postData');\n            });\n        }\n    }\n\n    componentDidMount() {\n        this.setFirstVisibleIndex();\n        this.resizeTimeButtons();\n        this.setTimeLineLeft();\n\n        const timeButtons = this.timeLineRef.current.querySelector('.buttonsWrapper');\n        setTimeout(() => {\n            timeButtons.classList.remove('loading');\n        },0);\n        this.prevWindowWidth = window.innerWidth;\n        window.addEventListener('resize', this.onRezise);\n    }\n\n    onRezise = () => {\n        if (this.prevWindowWidth !== window.innerWidth) {\n            this.resizeTimeButtons();\n            this.setTimeLineLeft();\n            this.prevWindowWidth = window.innerWidth;\n        }\n    };\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.onRezise);\n    }\n\n    getVibisleTimeButtonsCount() {\n        const timeButtonsWidth = this.timeLineRef.current.querySelector('.buttonsWrapper').offsetWidth;\n        const count = 1 + parseInt(timeButtonsWidth / 100);\n        return count;\n    }\n\n    getTimeButtonWidth = () => {\n        const timeButtonsWidth = this.timeLineRef.current.querySelector('.buttonsWrapper').offsetWidth;\n        const buttonsCount = this.getVibisleTimeButtonsCount();\n        let width = parseFloat(timeButtonsWidth / buttonsCount);\n        return width;\n    };\n\n    setTimeLineLeft() {\n        const timeButtons = this.timeLineRef.current.querySelector('.timeButtons');\n        const timeButtonsWidth = this.timeLineRef.current.querySelector('.buttonsWrapper').offsetWidth;\n        const nextBtn = this.timeLineRef.current.querySelector('.next');\n        const prevBtn = this.timeLineRef.current.querySelector('.prev');\n        let left = 0;\n        let rightPosLimit = timeButtons.offsetWidth - timeButtonsWidth;\n        const buttonsCount = this.getVibisleTimeButtonsCount();\n        console.log('buttonsCount', buttonsCount, 'firstVisibleTimeIndex', this.firstVisibleTimeIndex);\n        // if last button is visible stick to right\n        if (buttonsCount >= this.timeLineData.items.length - this.firstVisibleTimeIndex) {\n            left = rightPosLimit;\n            this.firstVisibleTimeIndex = this.timeLineData.items.length - buttonsCount;\n            nextBtn.setAttribute('disabled', true);\n            console.log('disable last');\n        }\n        else if (this.firstVisibleTimeIndex > 0) {\n            nextBtn.removeAttribute('disabled');\n            let buttons = this.timeLineRef.current.querySelectorAll('.timebtn');\n            [].some.call(buttons, (button, btnIndex) => {\n                left += button.offsetWidth;\n                return this.firstVisibleTimeIndex <= btnIndex + 1;\n            });\n        }\n\n        else if (this.firstVisibleTimeIndex < 1) {\n            prevBtn.setAttribute('disabled', true);\n        }\n\n        console.log(this.firstVisibleTimeIndex);\n\n        timeButtons.style.left = -left + 'px';\n    }\n\n    resizeTimeButtons = () => {\n        const buttonWidth = this.getTimeButtonWidth();\n        this.timeLineRef.current.querySelectorAll('.timebtn').forEach(item => {\n            item.style.minWidth = buttonWidth + 'px';\n            item.style.maxWidth = buttonWidth + 'px';\n            item.style.width = buttonWidth + 'px';\n        });\n    };\n\n    scroll = (toRight = true) => {\n        const fromTime = this.state.selectedTime.label;\n        const timeButtons = this.timeLineRef.current.querySelector('.timeButtons');\n        const buttonsWrapper = this.timeLineRef.current.querySelector('.buttonsWrapper');\n        const prevBtn = this.timeLineRef.current.querySelector('.prev');\n        const nextBtn = this.timeLineRef.current.querySelector('.next');\n        let currentPos = parseInt(timeButtons.style.left) || 0;\n        let newPos = null;\n        const btnFrom = this.timeLineRef.current.querySelector(`button[data-label=\"${fromTime}\"]`);\n        let scrollStep = btnFrom.offsetWidth;\n\n        newPos = toRight ? currentPos - scrollStep : currentPos + scrollStep;\n\n        let leftPosLimit = 0;\n        // let rightPosLimit = timeButtons.offsetWidth + prevBtn.offsetWidth + nextBtn.offsetWidth;\n        let rightPosLimit = timeButtons.offsetWidth - buttonsWrapper.offsetWidth;\n\n        if (newPos >= leftPosLimit) {\n            newPos = 0;\n            prevBtn.setAttribute('disabled', true);\n        }\n        else {\n            prevBtn.removeAttribute('disabled');\n        }\n\n        if (Math.abs(newPos) >= rightPosLimit ) {\n            newPos = (-rightPosLimit);\n            nextBtn.setAttribute('disabled', true);\n        }\n        else {\n            nextBtn.removeAttribute('disabled');\n        }\n\n        timeButtons.style.left = newPos + 'px';\n\n    };\n\n    scrollToRight = () => {\n        this.firstVisibleTimeIndex++;\n        this.scroll();\n    }\n\n    scrollToLeft = () => {\n        this.firstVisibleTimeIndex--;\n        this.scroll(false);\n    }\n\n    scrollSwitch = (direction) => {\n        if (direction === 'left') {\n            this.scrollToLeft();\n        }\n        else if (direction === 'right') {\n            this.scrollToRight();\n        }\n    }\n\n    handleScrollMouseDown = (e, direction) => {\n        if (e.button !== 0) return;\n        e.stopPropagation();\n        console.log('handleScrollMouseDown', direction);\n        if (direction) {\n            this.mouseDownOnScrollInterval = setInterval(() => {\n                this.isMouseHoldedOnScroll = true;\n                console.log('handleScrollMouseDown timer', direction);\n                this.scrollSwitch(direction);\n            }, 300);\n        }\n    }\n\n    handleScrollMouseUp = (e, direction) => {\n        if (e.button !== 0) return;\n        e.stopPropagation();\n        if (!this.isMouseHoldedOnScroll) {\n            this.scrollSwitch(direction);\n        }\n        this.isMouseHoldedOnScroll = false;\n        clearInterval(this.mouseDownOnScrollInterval);\n    }\n\n    prepTimeLine(events = []) {\n        let timeLine = {};\n        this.timeLineData.items.forEach(item => {\n            let status = STATUSES.AVAILABLE;\n            let crossedOrPengingEvent = null;\n            if (events.length) {\n                events.some(event => {\n                    status = this.getStatus(item.date, event);\n                    crossedOrPengingEvent = event;\n                    return STATUSES.AVAILABLE !== status;\n                });\n            }\n            const selected = this.nowLabel === item.label;\n            timeLine[item.label] = {\n                label: item.label,\n                date: item.date,\n                event: crossedOrPengingEvent,\n                status: status,\n                className: selected ? 'selected' : '',\n                disabled: status !== STATUSES.AVAILABLE,\n            };\n        });\n        return timeLine;\n    }\n\n    handleTimeClick = (e) => {\n        e.currentTarget.classList.toggle('selected');\n        const label = e.currentTarget.dataset.label;\n        this.setTimeData(e.currentTarget);\n        this.changeTime(label);\n    };\n\n\n    setIntermediate = () => {\n        this.timeLineRef.current.querySelectorAll('.timebtn').forEach((btn, index) => {\n            if (this.timeData.timeIndex1 && index >= this.timeData.timeIndex1\n                && this.timeData.timeIndex2 && index <= this.timeData.timeIndex2) {\n                btn.classList.add('intermediate');\n            }\n            else {\n                btn.classList.remove('intermediate');\n            }\n        });\n    };\n\n    setTimeData(clickedBtn) {\n        let status = clickedBtn.dataset.status\n        let index = clickedBtn.dataset.index;\n        if (status !== STATUSES.AVAILABLE) {\n            return;\n        }\n\n        if (index === this.timeData.timeIndex1) {\n            this.timeData.timeIndex1 = NaN;\n            console.log('index === index1');\n            clickedBtn.classList.remove('postData');\n        }\n        else if (index === this.timeData.timeIndex2) {\n            this.timeData.timeIndex2 = NaN;\n            console.log('index === index2');\n            clickedBtn.classList.remove('postData');\n        }\n\n        else if(isNaN(this.timeData.timeIndex1)) {\n            this.timeData.timeIndex1 = index;\n            clickedBtn.classList.add('postData');\n        }\n        else if (isNaN(this.timeData.timeIndex2)) {\n            this.timeData.timeIndex2 = index;\n            clickedBtn.classList.add('postData');\n        }\n\n        else {\n            let prevBtn = null;\n            if (index < this.timeData.timeIndex1) {\n                prevBtn = this.timeLineRef.current.querySelector(`.timebtn[data-index=\"${this.timeData.timeIndex1}\"]`);\n                this.timeData.timeIndex1 = index;\n            }\n            else if (index > this.timeData.timeIndex1) {\n                prevBtn = this.timeLineRef.current.querySelector(`.timebtn[data-index=\"${this.timeData.timeIndex2}\"]`);\n                this.timeData.timeIndex2 = index;\n            }\n            prevBtn.classList.remove('postData');\n            clickedBtn.classList.add('postData');\n        }\n        this.setIntermediate();\n    }\n\n    changeTime = (label) => {\n        this.setState({ selectedTime: this.timeLine[label] });\n    }\n\n    isReservedByMe(event) {\n        return !!Math.round(Math.random(0,1));\n        // return event.user._id === this.props.userStore.user.id);\n    }\n\n    handleAddEvent = () => {\n        let args = [ this.room._id];\n        const timeIndexes = Object.values(this.timeData).filter(time => time);\n        timeIndexes.forEach(index => {\n            args.push(\n                dayjs(`${dayjs(this.date).format('YYYY-MM-DD')} ${this.timeLineData.items[index].label}`).format('YYYY-MM-DDTHH:mm')\n            );\n        });\n        const link = '/events/add/' + args.join('/');\n        this.setState({ redirectToAdd: link });\n    };\n\n    getStatus(time, event) {\n        let timeToCompare = dayjs(time).second(0).millisecond(0);\n        let dateStart = dayjs(event.date_start).second(0).millisecond(0);\n        let dateEnd = dayjs(event.date_end).second(0).millisecond(0);\n\n        let isCrossed = timeToCompare >= dateStart && timeToCompare < dateEnd\n        if (isCrossed) {\n            return STATUSES.RESERVED;\n        }\n\n        let isPending = timeToCompare >= dateStart.subtract(this.stepMinutes - 1, 'minute') && timeToCompare < dateEnd;\n        if(isPending) {\n            return STATUSES.PENDING;\n        }\n\n        return STATUSES.AVAILABLE\n    }\n    render() {\n        if (this.state.redirectToAdd) {\n            return <Redirect to={this.state.redirectToAdd}/>\n        }\n        console.info('  render RoomEvents room:', this.room.number);\n        return (\n            <div className={`roomEvents mdc-theme--primary-bg`}>\n                <div className=\"baseWrapper\">\n                    <EventDetails onSubmit={this.handleAddEvent}\n                        timeData={this.timeData} timeLineData={this.timeLineData}\n                        room={this.room} selectedTime={this.state.selectedTime} />\n                    {this.TimeLine()}\n                </div>\n            </div>\n        );\n    }\n\n\n    TimeLine() {\n        const buttonProps = (item, index) => {\n            const label = item.label;\n            const status = this.timeLine[label]['status'];\n            const className = `timebtn ${status} ${this.timeLine[label].className}`;\n            return {\n                id: `${this.room.number}-scrollable-auto-tab-${index}`,\n                'aria-controls': `${this.room.number}-scrollable-auto-tab-${index}`,\n                'aria-label': label,\n                key: index,\n                'data-label': label,\n                'data-index': index,\n                'data-status': status,\n                label: item.label,\n                className: className,\n                onClick: this.handleTimeClick,\n            };\n        };\n\n        return(\n            <div ref={this.timeLineRef} className=\"timeline\">\n                <Button data-direction=\"left\" className=\"prev\"\n                    onMouseDown={e => {\n                        this.handleScrollMouseDown(e, 'left');\n                    }}\n                    onMouseUp={e => {\n                        this.handleScrollMouseUp(e, 'left');\n                    }}>\n                    <ArrowLeftIcon/>\n                </Button>\n                <div className=\"buttonsWrapper loading\">\n                    <div className=\"timeButtons\">\n                        {this.timeLineData.items.map((item, index) => (\n                            <Button {...buttonProps(item, index)}>{item.label}</Button>\n                        ))}\n                    </div>\n                </div>\n                <Button data-direction=\"right\" className=\"next\"\n                    onMouseDown={e => {\n                        this.handleScrollMouseDown(e, 'right');\n                    }}\n                    onMouseUp={e => {\n                        this.handleScrollMouseUp(e, 'right');\n                    }}>\n                    <ArrowRightIcon/>\n                </Button>\n            </div>\n        );\n    }\n}\n\nfunction EventDetails(props) {\n    console.log('EventDetails render');\n    const room = props.room;\n    const selectedTime = props.selectedTime;\n\n    const status = selectedTime.status;\n\n    const renderEventInfo = () => {\n        switch(status) {\n            case STATUSES.PENDING:\n                return (\n                    <div className=\"pengindEvent\">\n                        <div>Event is comming soon</div>\n                        <div>Start in: {EventHelper.dateFormatClient(selectedTime.event.date_start, 'DD-MM-YYYY HH:mm')}</div>\n                        <div>Ends in: {EventHelper.dateFormatClient(selectedTime.event.date_end, 'HH:mm')}</div>\n                    </div>\n                );\n            case STATUSES.RESERVED:\n                return (\n                    <div className=\"roomReserved\">\n                        <div>Room is reserved</div>\n                        <div>Start in: {EventHelper.dateFormatClient(selectedTime.event.date_start, 'DD-MM-YYYY HH:mm')}</div>\n                        <div>Ends in: {EventHelper.dateFormatClient(selectedTime.event.date_end, 'HH:mm')}</div>\n                    </div>\n                );\n            default:\n                return '';\n        }\n    };\n    return(\n        <div className=\"infoWrapper\">\n            <div className={`statusBar ${status}`}></div>\n            <div className=\"detailsWrapper\">\n                <div className=\"details\">\n                    <div className=\"number\">Number: <strong>{room.number}</strong></div>\n                    <div className=\"title\">Title: <strong>{room.title}</strong></div>\n                    <div className=\"status\">Status: {status}</div>\n                </div>\n                {renderEventInfo()}\n                {status === STATUSES.AVAILABLE && (\n                    <div className=\"addEventWrapper\">\n                        <Button onClick={props.onSubmit} variant=\"contained\" color=\"secondary\"\n                        size=\"medium\" fullWidth type=\"submit\" className=\"addEvent\">Add event</Button>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default RoomEvents;\n","import React from 'react';\n\nexport default class NoRooms extends React.Component {\n    render() {\n        return (\n            <div className=\"noRooms\">\n                <h2 className=\"text-center\">There are no conference rooms yet</h2>\n            </div>\n        );\n    }\n}\n","import Api from './api';\n\nclass RoomsApi extends Api {\n\n    list() {\n        return this.axios.get('/rooms/list');\n    }\n\n    getRoomsWithEventsOfDay(dateString) {\n        return this.axios.get('/rooms/roomsWithEventsOfDay/' + dateString);\n    }\n}\nexport default new RoomsApi();\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport memoize from 'memoize-one';\nimport {\n    Grid,\n    Container,\n    TextField,\n} from '@material-ui/core'\n\nimport DateUtils from '@date-io/dayjs';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport BaseComponent, { RENDER_STATES as BASE_RENDER_STATES } from '../../components/BaseComponent'\nimport RoomEvents from '../../components/RoomEvents'\nimport Bayan from '../../components/Bayan'\nimport NoRooms from '../../components/NoRooms';\nimport ServerError from '../../components/ServerError';\nimport AppError from '../../components/AppError';\n\n\nimport CODES from '../../services/codes';\nimport roomsApi from '../../services/roomsApi'\n\nimport './index.scss';\n\nconst RENDER_STATES = { ...BASE_RENDER_STATES, NO_ROOMS: 'NO_ROOMS', UPDATE: 'UPDATE' };\n\n\nexport default class Events extends BaseComponent {\n    constructor(props) {\n        super(props);\n\n        this.stepMinutes = 30;\n        this.timeLineLabelFormat = 'HH:mm';\n\n        this.state = {\n            ...this.state,\n            // selectedDate: dayjs().add('1', 'day').format('YYYY-MM-DD'),\n            selectedDate: dayjs(),\n            roomsFilterValue: '',\n        };\n\n        this.prevRoomList = null;\n\n        this.roomEventsRef = React.createRef();\n    }\n\n    async componentDidMount() {\n        this.loadRoomsWithEventsOfDay();\n    }\n\n    filter = memoize(\n        (list, filter) => {\n            let filteredField = 'title';\n            // check value is integer, n ^ 0 returns type number so we dont need strict equals\n            // and i dont need strict compare\n            // eslint-disable-next-line\n            if (this.state.roomsFilterValue == (this.state.roomsFilterValue ^ 0)) {\n                filteredField = 'number';\n            }\n            return this.state.rooms.filter(room => {\n                const re = new RegExp(this.state.roomsFilterValue, 'i');\n                return -1 !== room[filteredField].toString().search(re);\n            });\n        }\n    )\n\n    // getDate() {\n    //     return dayjs().startOf('day').toISOString()\n    // }\n\n    applyRoomFilterValue = (value) => {\n        this.setState({ roomsFilterValue: value });\n    }\n\n    async loadRoomsWithEventsOfDay(date = null) {\n        this.setState({ isLoading: true });\n        const datePost = date || this.state.selectedDate;\n        let resultState = {};\n        roomsApi.getRoomsWithEventsOfDay(datePost)\n            .then(({ response }) => {\n                const apiData = response.getApiData();\n                if (null === apiData.data || 'object' !== typeof apiData.data) {\n                    console.log('loadRoomsWithEvents->Invalid rooms data. Expected data object');\n                    return this.getServerErrorState('Invalid data from server');\n                }\n                if (!apiData.data.length) {\n                    return {\n                        renderState: RENDER_STATES.NO_ROOMS,\n                    };\n                }\n                // apiData.data.length = 1; // !!!!!!!!! for debug\n                const state = {\n                    rooms: apiData.data,\n                    renderState: RENDER_STATES.COMMON,\n                };\n                resultState = state;\n            })\n            .catch(({ error, response }) => {\n                const apiCode = response.getApiCode();\n                if (apiCode === CODES.ROOMS.INVALID_DATE) {\n                    console.log('Invalid date');\n                    resultState = this.getServerErrorState('Invalid date');\n                }\n                else {\n                    console.log('Invalid data from server');\n                    resultState = this.getServerErrorState('Invalid data from server');\n                }\n            })\n            .finally(() => {\n                this.setState({ isLoading: false, ...resultState});\n            });\n    }\n\n    handleRoomsFilterChange = (e) => {\n        this.setState({roomsFilterValue: e.target.value})\n    }\n\n    /*\n     * return object with timeline details for full day\n     * e.g. current time is 10:30\n    {\n        nowIndex: 0,\n            nowLabel: 10:30,\n            items[\n                {\n                    { label:00:00, date: new Date(00:00)},\n                    ...\n                    { label:23:30, date: new Date(23:30)}\n                }\n            ]\n    }\n    */\n    getTimeLine() {\n        const timeLineLen = (60 / this.stepMinutes) * 24;\n        let selectedDate = dayjs(this.state.selectedDate);\n        let now = dayjs();\n        // now = now.hour(1).minute(1);\n        let timeLineDate = dayjs(selectedDate).hour(now.hour()).minute(now.minute()).second(0).millisecond(0);\n\n        // for client last possible time button is 23:30\n        if (timeLineDate.hour() === 23 && timeLineDate.minute() > 30) {\n            timeLineDate = timeLineDate.minute(30);\n        }\n        else {\n            timeLineDate = timeLineDate.minute(this.stepMinutes * (Math.ceil(timeLineDate.minute() / this.stepMinutes)));\n        }\n\n        let nowLabel = null;\n        let nowIndex = null;\n        nowLabel = timeLineDate.format(this.timeLineLabelFormat);\n\n        // if (now.format('YYYY-MM-DD') !== timeLineDate.format('YYYY-MM-DD')) {\n        //     // for now working day starts at 09.00, but maybe in future its will be config from use profile page :)\n        //     // nowLabel = dayjs(timeLineDate).hour(9).format(this.timeLineLabelFormat);\n        // }\n        // else {\n        //     nowLabel = timeLineDate.format(timeLineLabelFormat);\n        // }\n        // const now = dayjs('18 apr 2021 23:00').second(0).millisecond(0);\n\n        const startOfDay = dayjs(timeLineDate).startOf('day');\n\n        let allItems = [];\n\n        for(let i = 0; i < timeLineLen; i++) {\n            let date = startOfDay.add(i * this.stepMinutes, 'minute')\n            let label = date.format(this.timeLineLabelFormat);\n\n            if (label === nowLabel) {\n                nowIndex = i;\n            }\n\n            allItems.push({\n                label: label,\n                date: date,\n            });\n        }\n\n        let timeLine = {\n            items: allItems,\n            nowLabel: nowLabel,\n            nowIndex: nowIndex,\n        };\n\n        return timeLine;\n\n    }\n\n    handleDateChange = async(date) => {\n        this.setState({ selectedDate: date, renderState: RENDER_STATES.UPDATE });\n        this.loadRoomsWithEventsOfDay(date);\n    }\n\n    render() {\n        console.info(' Events page render', this.state.renderState);\n        let component = null;\n        switch(this.state.renderState) {\n            case RENDER_STATES.FAILURE:\n                component = <ServerError data={this.state.serviceMessage}/>;\n                break;\n            case RENDER_STATES.INIT:\n                component = <Bayan/>;\n                break;\n            case RENDER_STATES.UPDATE:\n                component = this.prevRoomList;\n                break;\n            case RENDER_STATES.NO_ROOMS:\n                component = <NoRooms/>;\n                break;\n            case RENDER_STATES.COMMON:\n                this.timeLine = this.getTimeLine();\n                let rooms = null;\n                if (this.state.roomsFilterValue.length) {\n                    rooms = this.filter(this.state.rooms, this.state.roomsFilterValue);\n                }\n                else {\n                    rooms = this.state.rooms;\n                }\n                let breakPoints = { xs: 12, sm: 12, md: 6, lg: 6, xl: 6, };\n                let spacing = 4;\n\n                if (this.state.rooms.length === 1) {\n                    breakPoints = { xs: 12, sm: 12, md: 12, lg: 12, xl: 12, };\n                    spacing = 0;\n                }\n\n\n                const loopRooms = (rooms) => {\n                    const list = [];\n                    rooms.forEach(room => {\n                        list.push(\n                            <Grid key={room._id} item {...breakPoints}>\n                                <RoomEvents date={this.state.selectedDate} stepMinutes={this.stepMinutes} timeLine={this.timeLine} room={room}/>\n                            </Grid>\n                        );\n                    });\n                    return list;\n                };\n\n                component = (\n                    <>\n                        <Grid container className=\"filter\" justify=\"center\" spacing={4}>\n                            <Grid item xs={6} >\n                                <RoomFilter applyFilter={this.applyRoomFilterValue}\n                                    handleChange={this.handleRoomsFilterChange}\n                                    value={this.state.roomsFilterValue}/>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <EventsDatePicker selectedDate={this.state.selectedDate} applyDate={this.handleDateChange}/>\n                            </Grid>\n                        </Grid>\n                        {!rooms.length && (\n                            <div className=\"filterEmptyResult\">\n                                <h2>No rooms founded</h2>\n                            </div>\n                        )}\n                        <Grid container className={`roomEvents roomsLen${rooms.length}`} spacing={spacing} ref={this.roomEventsRef}>\n                            {loopRooms(rooms)}\n                        </Grid>\n                    </>\n                );\n                this.prevRoomList = component;\n                break;\n            default:\n                component = <AppError/>;\n        }\n\n        return(\n            <Container maxWidth=\"md\" className={`events page ${String(this.state.renderState).toLowerCase()}`}>\n                {component}\n            </Container>\n        );\n    }\n}\n\nclass RoomFilter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { value: props.value };\n        this.timeout = null;\n        this.applyFilter = props.applyFilter;\n    }\n\n    handleChange = (e) => {\n        this.setState({ value: e.target.value });\n        clearTimeout(this.timeout);\n        setTimeout(() => {\n            this.applyFilter(this.state.value);\n        }, 400);\n    };\n    render() {\n        const inputLabelProps = { shrink: true, };\n        const inputProps = {\n            type: 'text',\n        };\n        return (\n            <div className=\"roomsFilterValueWrapper\">\n                <TextField label=\"Room\" inputProps={inputProps} InputLabelProps={inputLabelProps} id=\"roomsFilterValue\"\n                    onChange={this.handleChange}\n                    value={this.state.value} />\n            </div>\n        );\n    }\n}\n\nclass EventsDatePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { selectedDate: props.selectedDate };\n        this.timeout = null;\n        this.applyDate = props.applyDate;\n    }\n    handleChange = (date) => {\n        this.setState({ selectedDate: date });\n        setTimeout(() => {\n            clearTimeout(this.timeout);\n            this.applyDate(this.state.selectedDate);\n        }, 500);\n    }\n    render() {\n        const inputLabelProps = { shrink: true, };\n        return(\n            <MuiPickersUtilsProvider utils={DateUtils}>\n                <KeyboardDatePicker\n                    id=\"date-dialog\"\n                    label=\"Date\"\n                    format=\"YYYY/MM/DD\"\n                    InputLabelProps={inputLabelProps}\n                    value={this.state.selectedDate}\n                    onChange={this.handleChange}\n                    KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                    }}\n                />\n            </MuiPickersUtilsProvider>\n        );\n    }\n}\n","import { EventHelper } from '../includes/modelsHelpers';\n\nimport ApiDataTypeError from '../services/error';\nimport roomsApi from '../services/roomsApi'\nimport eventsApi from '../services/eventsApi'\nimport CODES from '../services/codes'\n\nimport BaseComponent, { RENDER_STATES as BASE_RENDER_STATES } from '../components/BaseComponent';\n\nexport const RENDER_STATES = {\n    ...BASE_RENDER_STATES,\n    NO_ROOMS: 'NO_ROOMS',\n    SAVED: 'SAVED',\n};\n\nexport default class SaveEvent extends BaseComponent {\n\n    getPostData() {\n        const dateStart = EventHelper.dateFormat(this.state.event.date_start);\n        const dateEnd = EventHelper.dateFormat(this.state.event.date_end);\n        const postData = {\n            room: this.state.event.room._id,\n            title: this.state.event.title,\n            description: this.state.event.description,\n            date_start: dateStart,\n            date_end: dateEnd,\n        };\n        return postData;\n\n    }\n\n    async loadRoomList(setRoomState = true) {\n        const result = await roomsApi.list();\n        if (result.error) {\n            if (result.error instanceof ApiDataTypeError) {\n                console.error('ApiDataTypeError');\n            }\n            console.log('Invalid data from server');\n            return this.getServerErrorState('Invalid data type from server');\n        }\n        else {\n            const apiData = result.response.getApiData();\n            if (false === Array.isArray(apiData['rooms'])) {\n                console.log('Invalid rooms data. Expected rooms[]');\n                return this.getServerErrorState('Invalid data from server');\n            }\n            const stateProps = {};\n            stateProps.serviceMessage = '';\n            stateProps.roomsList = apiData.rooms;\n            stateProps.renderState = RENDER_STATES.COMMON;\n            if (!apiData.rooms.length) {\n                stateProps.renderState = RENDER_STATES.NO_ROOMS;\n            }\n            else if (setRoomState) {\n                const _id = apiData.rooms[0]['_id'];\n                console.info('state.event', this.state.event);\n                stateProps.event = {...this.state.event, room: { _id: _id }};\n                console.info('stateProps', stateProps);\n            }\n            return stateProps;\n        }\n    }\n\n    async loadEventDetails() {\n        const result = await eventsApi.getEvent(this.state.event._id);\n        const apiData = result.response.getApiData();\n        const apiCode = result.response.getApiCode();\n        if (result.error) {\n            if (result.error instanceof ApiDataTypeError) {\n                console.error('ApiDataTypeError');\n                return this.getServerErrorState('Invalid data type from server');\n            }\n            else if (404 === result.response.status) {\n                console.log('Event not found');\n                return this.getServerErrorState('Event not found');\n            }\n            if (apiCode === CODES.EVENTS.DETAILS_ID_REQUIRED) {\n                console.log('eventId is required');\n                return this.getServerErrorState('Event Id is required');\n            }\n            else if (apiCode === CODES.EVENTS.DETAILS_ID_INVALID) {\n                console.log('Invalid eventId');\n                return this.getServerErrorState('Invalid event Id');\n            }\n            else {\n                console.log('Invalid data from server');\n                return this.getServerErrorState('Invalid data from server');\n            }\n        }\n        else {\n            console.info(apiData.event.user._id);\n            if ('object' !== typeof apiData.event) {\n                console.log('Invalid data. Expected object event');\n                return this.getServerErrorState('Invalid data from serverq');\n            }\n            else if (apiData.event.user._id !== this.props.userStore.user.id) {\n                console.log('owner error', this.props.userStore.user.id, apiData.event.user._id);\n                return this.getServerErrorState('Permission denined!');\n            }\n            else {\n                const state = {\n                    serviceMessage: '',\n                    renderState: RENDER_STATES.COMMON,\n                    event: apiData.event,\n                };\n                return state;\n            }\n        }\n    }\n\n    handleDateStartChange = (datetime) => {\n        let errors = this.state.errors;\n        const validate = this.validateDateStart(datetime);\n        true === validate ? delete errors.date_start : errors.date_start = validate;\n        this.setState({event: { ...this.state.event, date_start: datetime }});\n    };\n\n    handleDateEndChange = (datetime) => {\n        let errors = this.state.errors;\n        const validate = this.validateDateEnd(datetime);\n        true === validate ? delete errors.date_end : errors.date_end = validate;\n        this.setState({event: {...this.state.event, date_end: datetime}});\n    };\n\n    handleRoomChange = (e) => {\n        const event = this.state.event;\n        event.room._id = e.target.value;\n        this.setState({event: event});\n    };\n\n    handleTitleChange = (e) => {\n        let errors = this.state.errors;\n        const validate = this.validateTitle(e.target.value);\n        true === validate ? delete errors.title : errors.title = validate;\n        this.setState({event: { ...this.state.event, title: e.target.value, errors }});\n    };\n\n    handleDescriptionChange = (e) => {\n        this.setState({event: { ...this.state.event, description: e.target.value }});\n    };\n\n    validateDateStart = (dateStart = '') => {\n        const date = new Date(dateStart);\n        const valid = !isNaN(date.getTime());\n        return valid ? true : { message: 'Invalid date' };\n    }\n\n    validateDateEnd = (date) => {\n        const dateStart = new Date(this.state.event.date_start);\n        const dateEnd = new Date(date);\n        console.log('validateDateEnd');\n        console.log(dateStart, dateEnd);\n        if (isNaN(dateEnd.getTime())) {\n            return { message: 'Invalid date' };\n        }\n        if (dateStart >= dateEnd) {\n            return { message: 'should be future' };\n        }\n        return true;\n    }\n\n    validateTitle = (title = '') => {\n        const valid = title.length > 2;\n        return valid ? true : { message: 'Less than 3 symbols' };\n    }\n\n    validate = () => {\n        let errors = {};\n        let validate = null;\n        if (true !== (validate = this.validateDateStart(this.state.event.date_start))) {\n            errors.date_start = validate;\n        }\n        if (true !== (validate = this.validateDateEnd(this.state.event.date_end))) {\n            errors.date_end = validate;\n        }\n        if (true !== (validate = this.validateTitle(this.state.event.title))) {\n            errors.title = validate;\n        }\n\n        return Object.keys(errors).length ? errors : true;\n    };\n}\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport DateUtils from '@date-io/dayjs';\nimport { Link as routerLink } from 'react-router-dom';\nimport {\n    FormControl,\n    Select,\n    TextField,\n    MenuItem,\n    FormHelperText,\n    Button,\n    Grid,\n    Link,\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport {\n    DateTimePicker,\n    KeyboardTimePicker,\n    MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\nimport Bayan from '../../components/Bayan'\n\nimport './index.scss';\n\nexport default class EventForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.submitBtnText = this.props.action;\n    }\n    render() {\n        console.info('EventForm render');\n        console.log(this.props);\n        console.log('roomId', this.props.event.room._id);\n\n        return (\n            <Grid container spacing={3} className=\"eventForm\">\n                <Grid item xs={4}>\n                    <FormControl fullWidth error={!!this.props.errors && !!this.props.errors.room}>\n                    <FormHelperText>Rooms list</FormHelperText>\n                    <Select\n                        onChange={this.props.handleRoomChange}\n                        value={this.props.event.room._id}\n                    >\n                    {Array.isArray(this.props.roomsList) && this.props.roomsList.map((room, index) => (\n                        <MenuItem key={room._id} value={room._id}>{room.number}</MenuItem>\n                    ))}\n                    </Select>\n                    </FormControl>\n                </Grid>\n                <MuiPickersUtilsProvider utils={DateUtils}>\n                <Grid item xs={4}>\n                <FormControl error={!!this.props.errors && !!this.props.errors.date_start}>\n                    <FormHelperText>Start time</FormHelperText>\n                        <DateTimePicker\n                            value={this.props.event.date_start}\n                            ampm={false}\n                            minutesStep={5}\n                            onChange={this.props.handleDateStartChange} />\n                </FormControl>\n                </Grid>\n                <Grid item xs={4}>\n                    <FormControl error={!!this.props.errors && !!this.props.errors.date_end}>\n                        <FormHelperText>Time end</FormHelperText>\n                        <KeyboardTimePicker\n                            value={this.props.event.date_end}\n                            onChange={this.props.handleDateEndChange}\n                            minutesStep={5}\n                            ampm={false}\n                        />\n                    </FormControl>\n                </Grid>\n                </MuiPickersUtilsProvider>\n                <Grid item xs={4}>\n                    <FormControl error={!!this.props.errors && !!this.props.errors.title}>\n                        <FormHelperText>Title</FormHelperText>\n                        <TextField value={this.props.event.title} onChange={this.props.handleTitleChange}/>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={8}>\n                    <FormControl fullWidth error={!!this.props.errors && !!this.props.errors.description}>\n                        <FormHelperText>Description</FormHelperText>\n                        <TextField multiline fullWidth value={this.props.event.description} onChange={this.props.handleDescriptionChange}/>\n                    </FormControl>\n                </Grid>\n                {this.props.alert &&(\n                <Grid item xs={12}>\n                        <Alert severity={this.props.alert.severity}>\n                            {this.props.alert.message}\n                        </Alert>\n                </Grid>\n                )}\n                {this.props.serviceMessage &&(\n                    <Grid item className=\"qq\" xs={12}>\n                        <Alert severity=\"error\">\n                            <div>{this.props.serviceMessage}</div>\n                                {Array.isArray(this.props.crossedEvents) && this.props.crossedEvents.map((event, index) => (\n                                    <div className=\"crossedEvents\" key={index}>\n                                        {dayjs(event.date_start).format('DD-MM-YY HH:mm')}\n                                        -{dayjs(event.date_end).format('HH:mm')}\n                                        &nbsp; reserved by <Link component={routerLink} variant=\"inherit\" to={`/@${event.user.name}`}>{event.user.name}</Link>\n                                    </div>\n                                ))}\n                        </Alert>\n                    </Grid>\n                )}\n                <Grid item xs={12} className=\"bayanNearButton\">\n                    {this.props.isLoading && <Bayan/>}\n                </Grid>\n                <Grid item xs={12} className=\"btnContainer\">\n                    <Button disabled={this.props.isLoading} className=\"submit\" variant=\"contained\" fullWidth\n                        type=\"button\" color=\"secondary\" onClick={this.props.handleSubmit}>{this.props.action}\n                    </Button>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n","import React from 'react';\nimport { Skeleton } from '@material-ui/lab';\nimport { Grid, } from '@material-ui/core';\n\nexport default class EventFormSkeleton extends React.Component {\n    render() {\n        return (\n            <Grid container spacing={3}>\n                <Grid item xs={4}>\n                    <Skeleton height=\"4rem\"/>\n                </Grid>\n                <Grid item xs={4}>\n                    <Skeleton height=\"4rem\"/>\n                </Grid>\n                <Grid item xs={4}>\n                    <Skeleton height=\"4rem\"/>\n                </Grid>\n                <Grid item xs={4}>\n                    <Skeleton height=\"4rem\"/>\n                </Grid>\n                <Grid item xs={8}>\n                    <Skeleton height=\"4rem\"/>\n                </Grid>\n                <Grid item xs={12}>\n                    <Skeleton height=\"4rem\"/>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport { withRouter } from \"react-router\";\nimport { Link as routerLink } from 'react-router-dom';\nimport { Container, Link } from '@material-ui/core';\n\nimport eventsApi from '../../services/eventsApi';\nimport ApiDataTypeError from '../../services/error';\nimport CODES from '../../services/codes';\n\nimport { Event } from '../../includes/models';\nimport { EventHelper } from '../../includes/modelsHelpers';\n\nimport SaveEvent, { RENDER_STATES } from '../../components/SaveEvent';\nimport EventForm from '../../components/EventForm';\nimport NoRooms from '../../components/NoRooms';\nimport EventFormSkeleton from '../../components/EventFormSkeleton';\nimport ServerError from '../../components/ServerError';\nimport AppError from '../../components/AppError';\n\nimport './index.scss';\n\n\n@withRouter\nclass AddEvent extends SaveEvent {\n    constructor(props) {\n        super(props)\n        this.state = {\n            ...this.state,\n            roomsList: [],\n            createdEvent: null,\n            crossedEvents: null,\n        };\n        this.initEventState();\n        this.handleAddEvent = this.handleAddEvent.bind(this);\n    }\n\n    initEventState() {\n        const defaultStartFrom = new Date();\n        defaultStartFrom.setMinutes(5 * (Math.round(defaultStartFrom.getMinutes() / 5)));\n        let defaultEvent = new Event({\n            date_start: defaultStartFrom,\n            date_end: dayjs(defaultStartFrom).add(30, 'minute'),\n        });\n\n        if (this.props.match.params.roomId) {\n            this.state.event = this.getEventFromUrl(defaultEvent);\n        }\n        else {\n            this.state.event = defaultEvent;\n        }\n    }\n\n    getEventFromUrl(event = {}) {\n        const roomId = this.props.match.params.roomId;\n        const dateFrom = this.props.match.params?.from ? dayjs(this.props.match.params.from) : undefined;\n        const dateTo = this.props.match.params?.to? dayjs(this.props.match.params.to) : undefined;\n\n        event.room = { _id: roomId, };\n\n        if (dateFrom && dateFrom.isValid()) {\n            event.date_start = dateFrom;\n            event.date_end = dateTo && dateTo.isValid() ? dateTo : dateFrom.add(30, 'minute');\n        }\n\n        return event;\n    }\n\n\n    async componentDidMount() {\n        this.setState({ isLoading: false, });\n        const setRoomState = !(this.state.event.room?._id);\n        const newStateOpts = await this.loadRoomList(setRoomState);\n        this.setState({ ...newStateOpts, isLoading: false, });\n    }\n\n    async addEvent() {\n        const postData = this.getPostData();\n        console.info('addEvent with:', postData);\n        const result = await eventsApi.addEvent(postData);\n        if (result.error) {\n            const apiCode = result.response.getApiCode();\n            const apiData = result.response.getApiData();\n            const apiMessage = result.response.getApiMessage();\n            if (apiCode === CODES.EVENTS.VALIDATION) {\n                const errorFields = result.response.getErrorFields();\n                console.log('AddEvent->Validation error', errorFields);\n                return this.getValidationErrorState('Validation error', errorFields);\n            }\n            else if (apiCode === CODES.EVENTS.CROSS_DATES) {\n                const dbEvents = apiData.events;\n                if (false === Array.isArray(dbEvents)) {\n                    console.log('Expected array of events from database', apiMessage);\n                    return this.getServerErrorState('Invalid data from server');\n                }\n                const errorFields = {date_start: true, date_end: true};\n                const serviceMessage = 'Date is crossed with enother events';\n                console.log('AddEvent->Validation error', errorFields);\n                return this.getValidationErrorState(serviceMessage, errorFields, {crossedEvents:dbEvents});\n            }\n            else if (apiCode === CODES.EVENTS.ROOM_NOT_EXISTS) {\n                const serviceMessage = 'Room does not exist. Please try another room';\n                console.log('Room does not exists', apiMessage);\n                return this.getValidationErrorState(serviceMessage);\n            }\n            else if (apiCode === CODES.EVENTS.ROOM_NOT_ACTIVE) {\n                const serviceMessage = 'Room is closed. Please try another room';\n                console.log('Room not active', apiMessage);\n                return this.getValidationErrorState(serviceMessage);\n            }\n            else {\n                if (result.error instanceof ApiDataTypeError) {\n                    console.error('addEvent->ApiDataTypeError');\n                }\n                console.log('AddEvent->Invalid data from server', result.error);\n                return this.getServerErrorState('Invalid data from server');\n            }\n        }\n        else {\n            const apiData = result.response.getApiData();\n            if (null === apiData.event || 'object' !== typeof apiData.event) {\n                console.log('addEvent>Invalid rooms data. Expected event object');\n                console.log(apiData);\n                return this.getServerErrorState('Invalid data from server');\n            }\n            if (!apiData.event._id) {\n                console.log('addEvent>Invalid rooms data. Expected event id');\n                console.log(apiData);\n                return this.getServerErrorState('Invalid data from server');\n            }\n            const state = {\n                renderState: RENDER_STATES.SAVED,\n                createdEvent: apiData.event,\n            };\n            return state;\n        }\n    }\n\n    async handleAddEvent() {\n        let validate = this.validate();\n        if (true !== validate ) {\n            this.setState({ errors: validate });\n            return;\n        }\n        this.setState({\n            isLoading: true,\n            errors: {},\n        });\n        const newStateOpts = await this.addEvent();\n        this.setState({\n            isLoading: false,\n            ...newStateOpts,\n        });\n    }\n\n    render() {\n        console.info('render', this.state.renderState);\n        let component = null;\n        switch(this.state.renderState) {\n            case RENDER_STATES.SAVED:\n                component = <EventCreated event={this.state.createdEvent}/>;\n                break;\n            case RENDER_STATES.NO_ROOMS:\n                component = <NoRooms/>;\n                break;\n            case RENDER_STATES.FAILURE:\n                component = <ServerError data={this.state.serviceMessage}/>;\n                break;\n            case RENDER_STATES.INIT:\n                component = <EventFormSkeleton/>;\n                break;\n            case RENDER_STATES.COMMON:\n                component = (\n                    <>\n                        <h2 className=\"text-center\">Add event</h2>\n                        <EventForm\n                            isLoading={this.state.isLoading}\n                            errors={this.state.errors}\n                            serviceMessage={this.state.serviceMessage}\n                            roomsList={this.state.roomsList}\n                            crossedEvents={this.state.crossedEvents}\n\n                            action=\"add\"\n                            renderState={this.state.renderState}\n\n                            event={this.state.event}\n\n                            handleRoomChange={this.handleRoomChange}\n                            handleDateStartChange={this.handleDateStartChange}\n                            handleDateEndChange={this.handleDateEndChange}\n                            handleTitleChange={this.handleTitleChange}\n                            handleDescriptionChange={this.handleDescriptionChange}\n                            handleSubmit={this.handleAddEvent}\n                        />\n                    </>\n                );\n                break;\n            default:\n                component = <AppError data=\"Application error\"/>;\n        }\n\n        return(\n            <Container maxWidth=\"md\" className={`addEvent page ${String(this.state.renderState).toLowerCase()}`}>\n                {component}\n            </Container>\n        );\n    }\n}\n\nfunction EventCreated(props) {\n    return (\n        <div className=\"created text-center\">\n            <h2>Event created successfuly in room #{props.event.room.number}.</h2>\n            <p>Start at: {EventHelper.dateFormat(props.event.date_start, 'DD-MM-YYYY HH:mm')}</p>\n            <p>End at: {EventHelper.dateFormat(props.event.date_end, 'DD-MM-YYYY HH:mm')}</p>\n            <p>\n                You can <Link component={routerLink} variant=\"inherit\" to={`/events/change/${props.event._id}`}>change</Link>&nbsp;or&nbsp;\n                <Link component={routerLink} variant=\"inherit\" to={`/events/delete/${props.event._id}`}>delete</Link>\n            </p>\n        </div>\n    );\n}\n\nexport default AddEvent;\n","import React from 'react';\nimport { Container } from '@material-ui/core';\n\nimport { inject } from 'mobx-react';\n\nimport eventsApi from '../../services/eventsApi';\nimport ApiDataTypeError from '../../services/error';\nimport CODES from '../../services/codes';\n\nimport { Event } from '../../includes/models';\n\nimport SaveEvent, { RENDER_STATES } from '../../components/SaveEvent';\nimport EventForm from '../../components/EventForm'\nimport EventFormSkeleton from '../../components/EventFormSkeleton';\nimport NoRooms from '../../components/NoRooms';\nimport ServerError from '../../components/ServerError';\nimport AppError from '../../components/AppError';\n\nimport './index.scss';\n\n\n@inject('userStore')\nclass ChangeEvent extends SaveEvent {\n    constructor(props) {\n        super(props)\n        const eventId = this.props.match.params.id;\n        const eventModel = new Event({\n            _id: eventId,\n        });\n        this.state = {\n            ...this.state,\n            event: eventModel,\n            roomsList: [],\n            changed: false,\n            crossedEvents: null,\n        }\n    }\n\n    async componentDidMount() {\n        this.setState({ isLoading: true, });\n        let roomState = await this.loadRoomList(false);\n        if ('renderState' in roomState && roomState.renderState !== RENDER_STATES.COMMON) {\n            this.setState({...roomState, isLoading: false});\n            return;\n        }\n        let eventState = await this.loadEventDetails();\n        if ('renderState' in eventState && eventState.renderState !== RENDER_STATES.COMMON) {\n            this.setState({...eventState, isLoading: false});\n            return;\n        }\n        else {\n            this.setState({...roomState, ...eventState, isLoading: false,});\n        }\n    }\n\n    async changeEvent() {\n        const postData = this.getPostData();\n        console.info('changeEvent with:', postData);\n        const result = await eventsApi.changeEvent(this.state.event._id, postData);\n        if (result.error) {\n            const apiCode = result.response.getApiCode();\n            const apiData = result.response.getApiData();\n            const apiMessage = result.response.getApiMessage();\n            if (apiCode === CODES.EVENTS.NOT_BELONG_TO_YOU) {\n                console.log('permission error', apiMessage);\n                return this.getServerErrorState('Permission denined!');\n            }\n            else if (apiCode === CODES.EVENTS.VALIDATION) {\n                const errorFields = result.response.getErrorFields();\n                console.log('changeEvent->Validation error', errorFields);\n                return this.getValidationErrorState('Validation error', errorFields);\n            }\n            else if (apiCode === CODES.EVENTS.CROSS_DATES) {\n                const dbEvents = apiData.events;\n                if (false === Array.isArray(dbEvents)) {\n                    console.log('Expected array of events from database', apiMessage);\n                    return this.getServerErrorState('Invalid data from server');\n                }\n                const errorFields = {date_start: true, date_end: true};\n                const serviceMessage = 'Date is crossed with enother events';\n                console.log('changeEvent->Validation error', errorFields);\n                this.getValidationErrorState(serviceMessage, errorFields, {crossedEvents:dbEvents});\n            }\n            else if (apiCode === CODES.EVENTS.ROOM_NOT_EXISTS) {\n                const serviceMessage = 'Room does not exist. Please try another room';\n                console.log('Room does not exists', apiMessage);\n                return this.getValidationErrorState(serviceMessage);\n            }\n            else if (apiCode === CODES.EVENTS.ROOM_NOT_ACTIVE) {\n                const serviceMessage = 'Room is closed. Please try another room';\n                console.log('Room not active', apiMessage);\n                return this.getValidationErrorState(serviceMessage);\n            }\n            else {\n                if (result.error instanceof ApiDataTypeError) {\n                    console.error('changeEvent->ApiDataTypeError');\n                }\n                console.log('changeEvent->Invalid data from server', result.error);\n                return this.getServerErrorState('Invalid data from server');\n            }\n        }\n        else {\n            const apiData = result.response.getApiData();\n            if (null === apiData.event || 'object' !== typeof apiData.event) {\n                console.log('changeEvent->Invalid rooms data. Expected event object');\n                console.log(apiData);\n                return this.getServerErrorState('Invalid data from server');\n            }\n            if (!apiData.event._id) {\n                console.log('changeEvent>Invalid rooms data. Expected event id');\n                console.log(apiData);\n                return this.getServerErrorState('Invalid data from server');\n            }\n\n            return {\n                changedEvent: apiData.event,\n                renderState: RENDER_STATES.SAVED,\n            };\n        }\n    }\n\n    handleSubmit = async () => {\n        const validate = this.validate();\n        if (true !== validate) {\n            this.setState({ errors: validate });\n            return;\n        }\n        this.setState({\n            isLoading: true,\n            errors: {},\n            changed: false,\n            serviceMessage: '',\n            renderState: RENDER_STATES.COMMON,\n        });\n        const state = await this.changeEvent();\n        this.setState({ isLoading: false, ...state });\n    }\n\n    render() {\n        console.info('render', this.state.renderState);\n        let alert = null;\n        let component = null;\n        if (this.state.renderState === RENDER_STATES.SAVED) {\n            alert = { message: 'Event saved', severity: 'success' };\n        }\n        switch(this.state.renderState) {\n            case RENDER_STATES.NO_ROOMS:\n                component = <NoRooms/>;\n                break;\n            case RENDER_STATES.FAILURE:\n                component = <ServerError data={this.state.serviceMessage}/>;\n                break;\n            case RENDER_STATES.INIT:\n                component = (\n                    <>\n                        <h2 className=\"text-center\">Change event</h2>\n                        <EventFormSkeleton/>\n                    </>\n                );\n                break;\n            case RENDER_STATES.SAVED:\n            case RENDER_STATES.COMMON:\n                component = (\n                    <>\n                        <h2 className=\"text-center\">Change event</h2>\n                        <EventForm\n                        isLoading={this.state.isLoading}\n                        errors={this.state.errors}\n                        serviceMessage={this.state.serviceMessage}\n                        roomsList={this.state.roomsList}\n                        crossedEvents={this.state.crossedEvents}\n\n                        action=\"change\"\n                        componentStatus={this.state.componentStatus}\n\n                        event={this.state.event}\n                        alert={alert}\n\n                        handleRoomChange={this.handleRoomChange}\n                        handleStartDateTimeChange={this.handleStartDateTimeChange}\n                        handleDateEndChange={this.handleDateEndChange}\n                        handleTitleChange={this.handleTitleChange}\n                        handleDescriptionChange={this.handleDescriptionChange}\n                        handleSubmit={this.handleSubmit} />\n                    </>\n                );\n                break;\n            default:\n                component = <AppError data=\"Application error\"/>;\n        }\n\n        return(\n            <Container maxWidth=\"md\" className={`addEvent page ${String(this.state.renderState).toLowerCase()}`}>\n                {component}\n            </Container>\n        );\n    }\n}\n\nexport default ChangeEvent;\n","import React from 'react';\nimport { Link as routerLink } from 'react-router-dom';\nimport { withRouter } from \"react-router\";\n\nimport { inject } from 'mobx-react';\nimport dayjs from 'dayjs';\nimport {\n    Container,\n    Grid,\n    Button,\n} from '@material-ui/core';\n\nimport { Event } from '../../includes/models';\n\nimport eventsApi from '../../services/eventsApi';\nimport CODES from '../../services/codes';\n\nimport SaveEvent, { RENDER_STATES } from '../../components/SaveEvent';\nimport Bayan from '../../components/Bayan'\nimport NoRooms from '../../components/NoRooms';\nimport ServerError from '../../components/ServerError';\nimport AppError from '../../components/AppError';\n\nimport './index.scss';\n\n\n@inject('userStore')\n@withRouter\nclass DeleteEvent extends SaveEvent {\n    constructor(props) {\n        super(props)\n        const eventId = this.props.match.params.id;\n        const eventModel = new Event({\n            _id: eventId,\n        });\n        this.state = { ...this.state, event: eventModel }\n    }\n\n    async componentDidMount() {\n        this.setState({ isLoading: true, });\n        const newProps = await this.loadEventDetails();\n        this.setState({\n            isLoading: false,\n            ...newProps,\n        });\n    }\n\n    deleteEvent = async() => {\n        const result = await eventsApi.deleteEvent(this.state.event._id);\n        const apiMessage = result.response.getApiMessage();\n        const apiCode = result.response.getApiCode();\n        if (result.error) {\n            if (apiCode === CODES.EVENTS.NOT_BELONG_TO_YOU) {\n                console.log('permission error', apiMessage);\n                return this.getServerErrorState('Permission denined!');\n            }\n            else {\n                console.log('server error', apiMessage);\n                return this.getServerErrorState('Server error');\n            }\n        }\n        else {\n            return { renderState: RENDER_STATES.SAVED };\n        }\n    }\n\n    handleDeleteEvent = async() => {\n        console.log('handleDeleteEvent');\n        this.setState({ isLoading: true });\n        const newProps = await this.deleteEvent();\n        this.setState({ isLoading: false, ...newProps });\n    };\n\n    render() {\n        let component = null;\n        switch(this.state.renderState) {\n            case RENDER_STATES.INIT:\n                component = <Bayan/>;\n                break;\n            case RENDER_STATES.NO_ROOMS:\n                component = <NoRooms/>;\n                break;\n            case RENDER_STATES.FAILURE:\n                component = <ServerError data={this.state.serviceMessage}/>;\n                break;\n            case RENDER_STATES.SAVED:\n                component = <EventDeleted/>;\n                break;\n            case RENDER_STATES.COMMON:\n                console.log(this.state.event);\n                component = <DeleteComfirm handleDeleteEvent={this.handleDeleteEvent} isLoading={this.state.isLoading} event={this.state.event}/>;\n                break;\n            default:\n                component = <AppError data=\"Application error\"/>;\n        }\n        return (\n            <Container maxWidth=\"md\" className={`addEvent page ${this.state.renderState}`}>\n                {component}\n            </Container>\n        );\n    }\n}\n\nfunction DeleteComfirm(props) {\n    return(\n        <>\n            <h2 className=\"text-center\">Are you sure to delete event?</h2>\n            <Grid className=\"eventDetails\">\n                <p><b>Room#:</b> {props.event.room.number}</p>\n                <p><b>Title:</b> {props.event.title}</p>\n                <p><b>Description:</b> {props.event.description}</p>\n                <p><b>Date start:</b> {dayjs(props.event.date_start).format('DD-MM-YYYY HH:mm')}</p>\n                <p><b>Date end:</b> {dayjs(props.event.date_end).format('DD-MM-YYYY HH:mm')}</p>\n            </Grid>\n            <Grid container className=\"btnContainer\">\n                <Button disabled={props.isLoading} className=\"btnAddEvent\" variant=\"contained\" fullWidth\n                    type=\"button\" color=\"secondary\" onClick={props.handleDeleteEvent}>Delete event\n                </Button>\n                {props.isLoading && <Bayan/>}\n            </Grid>\n        </>\n    );\n\n}\n\nfunction EventDeleted(props) {\n    return(\n        <>\n            <div className=\"created text-center\">\n                <h2>Event deleted successfuly.</h2>\n                <Grid container className=\"btnContainer\">\n                    <Button component={routerLink} to=\"/events/add\" variant=\"contained\" color=\"secondary\" fullWidth type=\"submit\">\n                        Add event\n                    </Button>\n                </Grid>\n            </div>\n        </>\n    );\n}\n\nexport default DeleteEvent;\n","import React from 'react';\n\nimport './index.scss'\n\n const Page404 = ({ location }) => (\n   <div className=\"page404 page\">\n      <h3 className=\"text-center\">No match found for <code>{location.pathname}</code></h3>\n   </div>\n);\n\nexport default Page404;\n","import React from 'react';\nimport Button from '@material-ui/core/Button'\n\nimport './index.scss'\n\nexport default class ServerError extends React.Component {\n\n\treloadWindow() {\n\t\twindow.location.reload();\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"serverError page\">\n\t\t\t\t<center>\n\t\t\t\t\t<h2>Hmm. We’re having trouble loading that application</h2>\n\t\t\t\t\t<Button variant=\"contained\" type=\"button\" color=\"secondary\" onClick={this.reloadWindow}>reload</Button>\n\t\t\t\t</center>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button'\n\nimport './index.scss'\n\nexport default class AppError extends React.Component {\n\n\treloadWindow() {\n\t\twindow.location.reload();\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"appError page\">\n\t\t\t\t<center>\n                    <h2 className=\"error\">Something went wrong.</h2>\n\t\t\t\t\t<Button variant=\"contained\" type=\"button\" color=\"secondary\" onClick={this.reloadWindow}>reload</Button>\n\t\t\t\t</center>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button'\n\nimport './index.scss'\n\nexport default class Offline extends React.Component {\n\n\treloadWindow() {\n\t\twindow.location.reload();\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"offline page\">\n\t\t\t\t<center>\n\t\t\t\t\t<h2>No internet connection</h2>\n\t\t\t\t\t<Button variant=\"contained\" type=\"button\" color=\"secondary\" onClick={this.reloadWindow}>reload</Button>\n\t\t\t\t</center>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport {\n    Container,\n    Button,\n    IconButton,\n    TextField,\n    CircularProgress,\n    FormControl,\n    FormHelperText,\n} from '@material-ui/core';\n\nimport Alert from '@material-ui/lab/Alert';\n\nimport {\n    Delete as DeleteIcon,\n    LockOutlined as LockIcon,\n    LockOpenOutlined as LockOpenIcon,\n    Refresh as RefreshIcon\n} from '@material-ui/icons';\n\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nimport './index.scss';\n\n@inject('adminRoomsStore')\n@observer\nclass adminRooms extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputSavingDelay = 500;\n        this.inputTimeoutx = undefined;\n    }\n    scrollTop() {\n        const element = document.querySelector('.rooms')\n        if (element) {\n            element.scrollIntoView({behavior: \"smooth\"});\n        }\n    }\n\n    async componentDidMount() {\n        this.props.adminRoomsStore.loadRoomList();\n    }\n\n    refreshListHandler = () => {\n        this.props.adminRoomsStore.loadRoomList();\n    }\n\n    toggleStatusHandler = (roomId) => {\n        this.props.adminRoomsStore.toggleRoomsStatus(roomId);\n    }\n\n    updateRoomHandler = (e, roomId) => {\n        clearTimeout(this.inputTimeoutx);\n        const fieldName = e.target.name;\n        if (!Object.keys(this.props.adminRoomsStore.fields).includes(fieldName)) {\n            console.error('invalid target field')\n            return;\n        }\n        const fieldValue = e.target.value;\n        if (this.props.adminRoomsStore.setRoomField(roomId, fieldName, fieldValue)) {\n            this.inputTimeoutx = setTimeout(() => {\n                this.props.adminRoomsStore.updateField(roomId, fieldName, fieldValue);\n            }, this.inputSavingDelay);\n        }\n    }\n\n    addRoomHandler = () => {\n        this.props.adminRoomsStore.addFreshRoom();\n    }\n\n    removeRoomHandler = (roomId) => {\n        this.props.adminRoomsStore.deleteRoom(roomId);\n    }\n\n    textFieldFocusHandler = (e) => {\n        this.props.adminRoomsStore.saveFocus(e.target);\n    }\n\n    render() {\n        const rooms = this.props.adminRoomsStore.rooms;\n        const isLoading = this.props.adminRoomsStore.isLoading;\n        const errorMessage = this.props.adminRoomsStore.errorMessage;\n        return (\n            <Container maxWidth=\"md\">\n\n                <div className=\"component rooms\">\n                    {true === isLoading && <div className=\"rooms__isLoading\"><CircularProgress className=\"\" color=\"secondary\" /></div> }\n                    <div className=\"rooms__header\">\n                        <h2>Rooms Settings</h2>\n                        <IconButton onClick={this.refreshListHandler} edge=\"end\" aria-label=\"unlock\">\n                            <RefreshIcon />\n                        </IconButton>\n                    </div>\n                    <div id=\"rooms__errorMessage\">\n                        {errorMessage && (\n                            <Alert className=\"rooms__alert\" severity=\"warning\">{errorMessage}</Alert>\n                        )}\n                    </div>\n                    <TableContainer component={Paper} className=\"rooms__listRoom\">\n                        <Table aria-label=\"rooms\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell aria-label=\"Number\" className=\"rooms__cellNumber\">Number</TableCell>\n                                    <TableCell aria-label=\"Title\">Title</TableCell>\n                                    <TableCell aria-label=\"Status\">Status</TableCell>\n                                    <TableCell aria-label=\"\" className=\"rooms__cellActions\"></TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {this.props.adminRoomsStore.rooms.map((room, index) => (\n                                    <React.Fragment key={room._id}>\n                                        <TableRow>\n                                            <TableCell className=\"rooms__cellNumber\">\n                                                <TextField\n                                                    disabled={isLoading}\n                                                    name=\"number\"\n                                                    type=\"text\"\n                                                    error={!!room?.errors?.number}\n                                                    fullWidth\n                                                    label=\"#\"\n                                                    variant=\"outlined\"\n                                                    onFocus={this.textFieldFocusHandler}\n                                                    onChange={(e) => this.updateRoomHandler(e, room._id)}\n                                                    defaultValue={room.number}/>\n                                            </TableCell>\n                                            <TableCell>\n                                                <TextField\n                                                    disabled={isLoading}\n                                                    name=\"title\"\n                                                    type=\"text\"\n                                                    fullWidth\n                                                    error={!!room?.errors?.title}\n                                                    variant=\"outlined\"\n                                                    label=\"Title:\"\n                                                    onFocus={this.textFieldFocusHandler}\n                                                    onChange={(e) => this.updateRoomHandler(e, room._id)}\n                                                    defaultValue={room.title}/>\n                                            </TableCell>\n                                            <TableCell className=\"rooms__cellActions\">\n                                                <div className=\"rooms__actionsContainer\">\n                                                    {'active' === room.status && (\n                                                        <IconButton\n                                                            onClick={(e) => this.toggleStatusHandler(room._id)}\n                                                            disabled={isLoading} edge=\"end\" aria-label=\"lock\">\n                                                            <LockOpenIcon />\n                                                        </IconButton>\n                                                    )}\n                                                    {'active' !== room.status && (\n                                                        <IconButton disabled={isLoading}\n                                                            onClick={(e) => this.toggleStatusHandler(room._id)} edge=\"end\" aria-label=\"unlock\">\n                                                            <LockIcon />\n                                                        </IconButton>\n                                                    )}\n                                                </div>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                <IconButton disabled={isLoading}\n                                                    onClick={() => this.removeRoomHandler(room._id)} edge=\"end\" aria-label=\"delete\">\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow>\n                                            <TableCell colSpan={4}>\n                                                <FormControl error={true}>\n                                                {!!room?.errors?.number && <FormHelperText>Number: {room.errors.number.message}</FormHelperText> }\n                                                {!!room?.errors?.title && <FormHelperText>Title: {room.errors.title.message}</FormHelperText> }\n                                                </FormControl>\n                                            </TableCell>\n                                        </TableRow>\n                                    </React.Fragment>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <FormControl>\n                        <Button onClick={this.addRoomHandler} variant=\"contained\" size=\"large\" color=\"secondary\" fullWidth type=\"button\" disabled={isLoading}>New room</Button>\n                    </FormControl>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default adminRooms;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { colors } from '@material-ui/core/'\n\nconst textColor = '#fff';\nconst contrastText = '#fff';\nconst paletteType = 'dark';\n\nexport const theme = createMuiTheme({\n    palette: {\n        type: paletteType,\n        background: {\n            default: paletteType === 'dark' ? '#191919' : '#fff'\n        },\n        primary: {\n            main: '#282828',\n            textColor: textColor,\n            contrastText: contrastText,\n        },\n        secondary: {\n            main: colors.green[700],\n            contrastText: contrastText,\n        },\n        error: {\n            main: colors.red[300],\n            contrastText: contrastText,\n        },\n    },\n    overrides: {\n        MuiTypography: {\n            colorPrimary: {\n                color: textColor\n            }\n        },\n        MuiPaper: {\n            root: {\n                backgroundColor: 'rgb(51 51 51 / 30%)',\n            },\n        },\n        MuiCssBaseline: {\n            '@global': {\n                html: {\n                    fontFamily: ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Oxygen',\n                        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue','sans-serif'].join(', '),\n                    WebkitFontSmoothing: 'antialiased',\n                    fontSize: 16,\n                }\n            }\n        }\n    }\n});\n\n\n// primary.main\n// secondary.main\n// error.main\n// warning.main\n// info.main\n// success.main\n// text.primary\n// text.secondary\n// text.disabled\n","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Switch, withRouter, Route } from \"react-router-dom\";\n\nimport authApi from './services/authApi';\nimport PrivateRoute from './routes/PrivateRoute'\nimport Bayan from './components/Bayan';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport Profile from './pages/Profile';\nimport Events from './pages/Events';\nimport AddEvent from './pages/AddEvent';\nimport ChangeEvent from './pages/ChangeEvent';\nimport DeleteEvent from './pages/DeleteEvent';\nimport Page404 from './pages/Page404';\nimport ServerError from './pages/ServerError';\nimport AppError from './pages/AppError';\nimport Offline from './pages/Offline';\nimport { RENDER_STATES } from './stores/appStore';\n\nimport adminRooms from './pages/admin/Rooms';\n\nimport Container from '@material-ui/core/Container';\n\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { theme } from './themes/';\n\nimport './App.scss'\n\n\n@inject('userStore', 'appStore')\n@withRouter\n@observer\nclass App extends React.Component {\n    async componentDidMount() {\n        const appStore = this.props.appStore;\n        const userStore = this.props.userStore;\n        if (!appStore.isOnline) {\n            appStore.setRenderState(RENDER_STATES.OFFLINE);\n            return;\n        }\n\n        authApi.verify()\n            .then(({ response }) => {\n                const apiData = response.getApiData();\n                if (!apiData.user) {\n                    appStore.setErrorMessage('Server error')\n                    appStore.setRenderState(RENDER_STATES.ERROR);\n                    console.log('invalid response', apiData);\n                }\n\n                userStore.setUser(apiData.user);\n                this.props.appStore.setRenderState(RENDER_STATES.COMMON);\n            })\n            .catch(({ error, response }) => {\n                if (error && error.response?.status !== 403) {\n                    appStore.setErrorMessage('Server error')\n                    appStore.setRenderState(RENDER_STATES.ERROR);\n                    console.log(response.message);\n                    return;\n                }\n\n                this.props.appStore.setRenderState(RENDER_STATES.COMMON);\n\n            });\n\n    }\n\n    render() {\n        console.info('App render', this.props.appStore.renderState);\n        const userStore = this.props.userStore;\n\n        const isLoggedIn = userStore.loggedIn;\n        const isAdmin = userStore.isAdmin;\n        let page = null;\n        switch(this.props.appStore.renderState) {\n            case RENDER_STATES.LOADER:\n                page = <Bayan/>;\n                break;\n            case RENDER_STATES.ERROR:\n                page = <ServerError/>;\n                break;\n            case RENDER_STATES.OFFLINE:\n                page = <Offline/>;\n                break;\n            case RENDER_STATES.COMMON:\n                page = (\n                    <Switch>\n                    <Route path=\"/login\" component={Login}/>\n                    <Route path=\"/register\" component={Register}/>\n\n                    <PrivateRoute path=\"/events\" exact component={Events} isLoggedIn={userStore.isLoggedIn}/>\n                    <PrivateRoute path=\"/events/add/:roomId?/:from?/:to?\" component={AddEvent} isLoggedIn={userStore.isLoggedIn}/>\n                    <PrivateRoute path=\"/events/change/:id\" exact component={ChangeEvent} isLoggedIn={userStore.isLoggedIn}/>\n                    <PrivateRoute path=\"/events/delete/:id\" exact component={DeleteEvent} isLoggedIn={userStore.isLoggedIn}/>\n                    <PrivateRoute path=\"/\" exact component={Events} isLoggedIn={userStore.isLoggedIn}/>\n                    <PrivateRoute path=\"/@:username\" component={Profile} isLoggedIn={userStore.isLoggedIn}/>\n\n                    <Route path=\"/rooms\" component={adminRooms} isAdmin={isAdmin} isLoggedIn={isLoggedIn}/>\n\n                    <Route component={Page404} />\n                    </Switch>\n                );\n                break;\n            default:\n                page = <AppError/>\n        }\n        return (\n            <ThemeProvider theme={theme}>\n                <CssBaseline/>\n                <div className=\"app\">\n                    <Header/>\n                    <main>\n                        <Container maxWidth=\"lg\">\n                            {page}\n                        </Container>\n                    </main>\n                    <Footer/>\n                </div>\n            </ThemeProvider>\n        );\n\n    }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport { HashRouter } from \"react-router-dom\";\nimport userStore from './stores/userStore';\nimport appStore from './stores/appStore';\nimport profileStore from './stores/profileStore';\nimport authStore from './stores/authStore';\nimport adminRoomsStore from './stores/admin/roomsStore';\nimport App from './App';\nimport './index.scss';\n\n\nconst stores = {\n    userStore, appStore, profileStore, authStore,\n    adminRoomsStore,\n};\n\n// <React.StrictMode>\n//   <App />\n// </React.StrictMode>\nReactDOM.render(\n    <Provider {...stores}>\n        <HashRouter>\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}